{
 'Реквизиты': {
  'Наименование': 'Контроль - Актуальность пользователей 1С',
  'ТекстОбработки': '//-----------------------------------------------------------------
//Параметры выгрузки
//-----------------------------------------------------------------
Отладка = Ложь;
ПочтаПолучателей = "support@t-medica.com;ssmirnov@t-medica.com";   
	 
ГуидУчетнойЗаписиПочты = "567e3146-123f-11ed-a12c-ef295ee2b5a3"; //предопределенная
	 
Если Отладка Тогда 
    ПочтаПолучателей = "ssmirnov@t-medica.com";
КонецЕсли;  

ДатаНачалаВыгрузки = ТекущаяДата();
СимволПереносаСтроки = "<br>";
ТемаСообщения = "Неактуальные пользователи 1С от "+Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy");
ТекстСообщения = "Информация от " + Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy") +СимволПереносаСтроки
	+ "Выведены пользователи, у которых аутентификация по ОС, при этом учетная запись заблокирована"+СимволПереносаСтроки
	+ "Перед блокировкой пользователей нужно убедиться, что пользователь не продолжит работу с обычной аутентификацией (если она включена)"
	+СимволПереносаСтроки+СимволПереносаСтроки;
	
//-----------------------------------------------------------------  
//Служебные параметры  
//----------------------------------------------------------------- 
ТекстЗапроса = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
	
//-----------------------------------------------------------------  
//Выполнение  
//----------------------------------------------------------------- 
ТЗ = Новый ТаблицаЗначений;
ТЗ.Колонки.Добавить("Номер",Новый ОписаниеТипов("Число"));
ТЗ.Колонки.Добавить("Система",Новый ОписаниеТипов("Строка"));
ТЗ.Колонки.Добавить("ПолноеИмя",Новый ОписаниеТипов("Строка")); 
ТЗ.Колонки.Добавить("ПользовательОС",Новый ОписаниеТипов("Строка"));
ТЗ.Колонки.Добавить("АутентификацияСтандартная",Новый ОписаниеТипов("Булево"));
ТЗ.Колонки.Добавить("ADактивна",Новый ОписаниеТипов("Булево,NULL"),"AD Активна");
ТЗ.Колонки.Добавить("ADlogin",Новый ОписаниеТипов("Строка,NULL"),"AD login");
   
//1 - сотрудники без EmployeeID 
НомерСтроки = 0;
ЗаписиSQL = Соединение.Execute(ТекстЗапроса);		
Если ЗаписиSQL.State = 1 Тогда 
	Пока ЗаписиSQL.EOF = 0 Цикл 
		НомерСтроки = НомерСтроки + 1;
		НовСтр = ТЗ.Добавить(); 
		НовСтр.Номер = НомерСтроки;
		НовСтр.Система = ЗаписиSQL.Fields("Система").Value;	
		НовСтр.ПолноеИмя = ЗаписиSQL.Fields("ПолноеИмя").Value; 
		НовСтр.ПользовательОС = ЗаписиSQL.Fields("ПользовательОС").Value;
		НовСтр.АутентификацияСтандартная = ЗаписиSQL.Fields("АутентификацияСтандартная").Value;
		НовСтр.ADактивна = ЗаписиSQL.Fields("ADактивна").Value;
		НовСтр.ADlogin = ЗаписиSQL.Fields("ADlogin").Value;

		ЗаписиSQL.MoveNext();
								
	КонецЦикла; 
КонецЕсли;
	
//------------------------------------------------------------------------------
//СКД
//------------------------------------------------------------------------------
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные", ТЗ);
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";ИсточникДанных.ТипИсточникаДанных = "Local";     
	
	НаборДанныхЗапросСКД = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")); //НаборДанныхЗапросСхемыКомпоновкиДанных
	НаборДанныхЗапросСКД.Имя = "НаборДанных1";
	//НаборДанныхЗапросСКД.Запрос = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
	НаборДанныхЗапросСКД.ИмяОбъекта = "ТЗДанные";
	НаборДанныхЗапросСКД.ИсточникДанных = "ИсточникДанных1";
	//НаборДанныхЗапросСКД.АвтоЗаполнениеДоступныхПолей = Истина; //для запроса
	
		
	Для каждого КолонкаТЗ Из ТЗ.Колонки Цикл //для ТЗ
		НовоеПоле = НаборДанныхЗапросСКД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.ТипЗначения = КолонкаТЗ.ТипЗначения; 
		НовоеПоле.Заголовок = КолонкаТЗ.Заголовок;
		НовоеПоле.ПутьКданным = КолонкаТЗ.Имя;
		НовоеПоле.Поле = КолонкаТЗ.Имя;
		 
		//оформление
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("Размещение",ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяВысота",20);  
		
		Если КолонкаТЗ.Имя = "Номер" Тогда   
			НовоеПоле.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",ГоризонтальноеПоложение.Лево);
		КонецЕсли;
	КонецЦикла;
	
	//Получить инициализированные настройки	
	ИсточникДоступныхНастроекКомпоновкиДанных = новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек = новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
		
	//настройки вывода
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления","Зеленый");  //БиблиотекаМакетовОформленияКомпоновкиДанных.Зеленый
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов",АвтоПозицияРесурсовКомпоновкиДанных.НеИспользовать);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов",РасположениеИтоговКомпоновкиДанных.Нет);
	
	//ВЫБРАННЫЕ ПОЛЯ
	ГруппировкаКД = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));	
	Для каждого КолонкаТЗ Из ТЗ.Колонки Цикл
		НовВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);
	КонецЦикла;
	
	
	//сортировка результата
	НовЭлПорядка = ГруппировкаКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовЭлПорядка.Поле = Новый ПолеКомпоновкиДанных("Номер");НовЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;  		
		
	//------------------------------------------------------------------------------
	//Формирование и отправка отчета по почте
	//------------------------------------------------------------------------------ 
	
	//Вывести отчет в ТД
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновки, , ,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТДРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТДРезультат.ВысотаТаблицы < 2 Тогда
		//нет данных
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - нет данных для отправки"+Символы.ПС;
	Иначе
		//есть данные, отправить в письме 
		
		Вложения = новый Массив;		
		//через поток в памяти
		//ПотокФайла = Новый ПотокВПамяти();
		//ТДРезультат.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.XLSX);
		//ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();	
		//Вложения.Добавить(Новый структура("Представление,АдресВоВременномХранилище",ТемаСообщения+".xlsx",ДвоичныеДанныеФайла)); 
		//ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
		
		//в тело письма HTMLТекстОтчета
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
		ТДРезультат.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.HTML);
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
		HTMLТекстОтчета = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла); 
		ТекстСообщения = ТекстСообщения + Символы.ПС + HTMLТекстОтчета;
		ТипТекста = ТипТекстаПочтовогоСообщения.HTML; 
		
		Алгоритм("ОтправитьEmail",ЗапросСсылка,ПочтаПолучателей,ТемаСообщения,ТекстСообщения,ТипТекста,ГуидУчетнойЗаписиПочты,Вложения);
		
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - сообщения отправлены"+Символы.ПС;
	КонецЕсли;	
	
	Если не Отладка Тогда
		УстановитьДатуПоследнейВыгрузки(Система,ЗапросСсылка,ДатаНачалаВыгрузки);
	КонецЕсли;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'ТекстЗапроса',
     'Разделитель': null,
     'ЗначениеСтрока': 'SELECT Системы1С.Наименование AS Система,
       ПользователиИБ1С.Имя,
       ПользователиИБ1С.ПолноеИмя,
       ПользователиИБ1С.АдресЭлектроннойПочты,
       ПользователиИБ1С.АутентификацияОС,
       ПользователиИБ1С.ПользовательОС,
       ПользователиИБ1С.АутентификацияСтандартная,
       AD.isActive as ADактивна,
       AD.loginFor1c AS ADlogin
FROM dbo.ПользователиИБ1С AS ПользователиИБ1С
INNER JOIN dbo.Системы AS Системы1С ON ПользователиИБ1С.Система = Системы1С.Система
LEFT JOIN
  (SELECT AD_1.DisplayName,
          AD_1.sAMAccountName,
          AD_1.userPrincipalName,
          \u0027\\\\\u0027 + AD_PrefixFor1C.Prefix + \u0027\\\u0027 + AD_1.sAMAccountName AS loginFor1c,
          AD_1.isActive,
          AD_1.EmployeeID

   FROM dbo.AD AS AD_1
   LEFT JOIN dbo.AD_PrefixFor1C AS AD_PrefixFor1C ON AD_1.Система = AD_PrefixFor1C.СистемаAD) AS AD ON 
   (ПользователиИБ1С.АутентификацияОС = 1 AND ПользователиИБ1С.ПользовательОС <> \u0027\u0027 AND ПользователиИБ1С.ПользовательОС = AD.loginFor1c) 
    --OR (AD.EmployeeID <> \u0027\u0027 AND AD.EmployeeID <> \u00270\u0027 AND AD.EmployeeID <> \u0027-\u0027 AND ПользователиИБ1С.EmployeeID = AD.EmployeeID)
WHERE 
	ПользователиИБ1С.ИмеетПравоНаВход = 1
	AND АутентификацияОС = 1 AND AD.isActive = 0 -- Авторизация по ОС и запись в AD заблокирована
    
ORDER BY Система,ПолноеИмя',
     'Комментарий': ''
    },
    {
     'Имя': 'ТекстЗапроса2',
     'Разделитель': null,
     'ЗначениеСтрока': 'SELECT Системы1С.Наименование AS Система,
       ПользователиИБ1С.Имя,
       ПользователиИБ1С.ПолноеИмя,
       ПользователиИБ1С.АдресЭлектроннойПочты,
       ПользователиИБ1С.АутентификацияОС,
       ПользователиИБ1С.ПользовательОС,
       ПользователиИБ1С.АутентификацияСтандартная,
       Сотрудники.Принят,
       Сотрудники.Уволен,
       AD.isActive as ADактивна,
       AD.loginFor1c AS ADlogin
FROM dbo.ПользователиИБ1С AS ПользователиИБ1С
INNER JOIN dbo.Системы AS Системы1С ON ПользователиИБ1С.Система = Системы1С.Система
LEFT JOIN
  (SELECT ФизическиеЛица.employeeID,
          CASE
              WHEN MAX(ДатаПриемаНаРаботу) = \u00270001-01-01\u0027 THEN 0
              ELSE 1
          END AS Принят,
          CASE
              WHEN MIN(ДатаУвольнения) = \u00270001-01-01\u0027 or MAX(ДатаУвольнения) >= DATEADD(day,-7,GETDATE()) THEN 0 --не уволена или с увольнения прошло более 7 дней
              ELSE 1
          END AS уволен
   FROM dbo.Сотрудники AS Сотрудники_1
   INNER JOIN dbo.ФизическиеЛица AS ФизическиеЛица ON Сотрудники_1.ФизЛицоUUID = ФизическиеЛица.UUID
   GROUP BY ФизическиеЛица.employeeID) AS Сотрудники ON ПользователиИБ1С.employeeID = Сотрудники.employeeID
LEFT JOIN
  (SELECT AD_1.DisplayName,
          AD_1.sAMAccountName,
          AD_1.userPrincipalName,
          \u0027\\\\\u0027 + AD_PrefixFor1C.Prefix + \u0027\\\u0027 + AD_1.sAMAccountName AS loginFor1c,
          AD_1.isActive,
          AD_1.EmployeeID

   FROM dbo.AD AS AD_1
   LEFT JOIN dbo.AD_PrefixFor1C AS AD_PrefixFor1C ON AD_1.Система = AD_PrefixFor1C.СистемаAD) AS AD ON 
   (ПользователиИБ1С.АутентификацияОС = 1 AND ПользователиИБ1С.ПользовательОС <> \u0027\u0027 AND ПользователиИБ1С.ПользовательОС = AD.loginFor1c) 
    --OR (AD.EmployeeID <> \u0027\u0027 AND AD.EmployeeID <> \u00270\u0027 AND AD.EmployeeID <> \u0027-\u0027 AND ПользователиИБ1С.EmployeeID = AD.EmployeeID)
WHERE (ПользователиИБ1С.ИмеетПравоНаВход = 1)
AND ( 
        (Принят = 1 AND Уволен = 1) -- Принят и уволен
        OR (АутентификацияОС = 1 AND isActive = 0) -- Авторизация по ОС и запись в AD заблокирована
    )
ORDER BY Система,ПолноеИмя',
     'Комментарий': ''
    }
   ]
  }
 ]
}
