{
 'Реквизиты': {
  'Код': '000000042',
  'Наименование': 'Контроль - сбор и отправка ошибок из журнала (неотложные)',
  'ТекстОбработки': '//------------------------------------------------------------------------------
	//ПАРАМЕТРЫ                                          
	//------------------------------------------------------------------------------
	Отладка = Ложь; 
	ДатаНачалаВыгрузкиОтладка = НачалоДня(ТекущаяДата());  
	
	ДатаНачалаВыгрузки = ТекущаяДата();
	МаксКоличествоДнейЖРНазад = 60;  
	МаксКолвоСобытий = 2000; //не более 2000 событий
	ТемаСообщения = ""+Система+" - НЕОТЛОЖНЫЕ ошибки ЖР от "+Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy");  
	
	ПочтаПолучателей = "group1c@t-medica.com"; 
	Если Отладка Тогда 
    	ПочтаПолучателей = "Skryukov@data-time.ru";
    КонецЕсли;
	  
	ГуидУчетнойЗаписиПочты = "567e3146-123f-11ed-a12c-ef295ee2b5a3"; //системная 
	
	СимволПереносаСтроки = Символы.ПС + Символы.ВК;
	ТекстСообщения = "Ошибки ЖР на " + Формат(ДатаНачалаВыгрузки,"ДФ=\u0027dd.MM.yyyy HH:mm:ss\u0027"); 
	
	//------------------------------------------------------------------------------
	//Сбор ЖР
	//------------------------------------------------------------------------------
	ДанныеПоследнейВыгрузки = ПолучитьДанныеПоследнейВыгрузки(Система,ЗапросСсылка.Ссылка);
	ДатаНачала = Макс(ДанныеПоследнейВыгрузки.Дата,НачалоДня(ДатаНачалаВыгрузки)-86400*МаксКоличествоДнейЖРНазад); //не ранее чем за последние X дней 
	
	Если Отладка И ЗначениеЗаполнено(ДатаНачалаВыгрузкиОтладка) Тогда 
		ДатаНачала = ДатаНачалаВыгрузкиОтладка;
	КонецЕсли;
	
	//------------------------------------------------------------------------------
	//Запрос в базу
	//------------------------------------------------------------------------------ 
	Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы");
	  
	ПараметрыHTTPЗапроса = новый структура("ДатаНачала,МаксКолвоСобытий",ДатаНачала,МаксКолвоСобытий);
	СтруктураЗапроса = Новый Структура("value,params",Код1СДляИсистемы,ПараметрыHTTPЗапроса);	
			
	ЗаписьJSON = Новый ЗаписьJSON;ЗаписьJSON.УстановитьСтроку();ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);			
	СтрокаТелаЗапроса = ЗаписьJSON.Закрыть();
		
	HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса+"?DateParamsNames=ДатаНачала");     
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	HTTPОтвет = Соединение.HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
	РезультатРазбораHTTP = Алгоритм("ПрочитатьОтветСервисаUniversal",HTTPОтвет); 
	Если не РезультатРазбораHTTP.Успешно Тогда 
		ВызватьИсключение РезультатРазбораHTTP.Результат;
	КонецЕсли;
        
	СтруктураРезультатЗапросаHTTP = ЗначениеИзСтрокиВнутр(РезультатРазбораHTTP.Результат);
	ТЗ_ЖР = СтруктураРезультатЗапросаHTTP.ТЗ_ЖР;
 		
 	//[todo] Можно распарсить комментарий [Неотложное.ТипСобытия], где вычислять тип события и по ним делить письма на разных получателей. Но пока не требуется
 	
 	//++ SP-18827 КрюковСЛ
 	//------------------------------------------------------------------------------
	//Запрос в базу по рег. заданиям
	//------------------------------------------------------------------------------ 
	Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные, "Код1СДляСистемыПоРегЗаданиям");
	
	//СтрокаГуидИсключенияРегЗаданий - Гуид рег заданий информационной базы через ";"
	СтрокаГуидИсключенияРегЗаданий = ПолучитьЗначениеПеременной(Переменные, "ГуидИсключенийРегЗаданий", Система);
	ПараметрыHTTPЗапроса = Новый структура("ДатаНачала,МаксКолвоСобытий,СтрокаГуидИсключенияРегЗаданий",ДатаНачала,МаксКолвоСобытий,СтрокаГуидИсключенияРегЗаданий);
	
	//Запрос
	СтруктураЗапроса = Новый Структура("value,params",Код1СДляИсистемы,ПараметрыHTTPЗапроса);	
			
	ЗаписьJSON = Новый ЗаписьJSON;ЗаписьJSON.УстановитьСтроку();ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);			
	СтрокаТелаЗапроса = ЗаписьJSON.Закрыть();
		
	HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса+"?DateParamsNames=ДатаНачала");     
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	HTTPОтвет = Соединение.HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
	РезультатРазбораHTTP = Алгоритм("ПрочитатьОтветСервисаUniversal",HTTPОтвет); 
	Если не РезультатРазбораHTTP.Успешно Тогда 
		ВызватьИсключение РезультатРазбораHTTP.Результат;
	КонецЕсли;
        
	СтруктураРезультатЗапросаHTTP = ЗначениеИзСтрокиВнутр(РезультатРазбораHTTP.Результат);

	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтруктураРезультатЗапросаHTTP.ТЗ_ЖР, ТЗ_ЖР);
	//-- SP-18827 КрюковСЛ
	
	//------------------------------------------------------------------------------
	//СКД
	//------------------------------------------------------------------------------
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные", ТЗ_ЖР);
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";ИсточникДанных.ТипИсточникаДанных = "Local";     
	
	НаборДанныхЗапросСКД = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")); //НаборДанныхЗапросСхемыКомпоновкиДанных
	НаборДанныхЗапросСКД.Имя = "НаборДанных1";
	//НаборДанныхЗапросСКД.Запрос = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
	НаборДанныхЗапросСКД.ИмяОбъекта = "ТЗДанные";
	НаборДанныхЗапросСКД.ИсточникДанных = "ИсточникДанных1";
	//НаборДанныхЗапросСКД.АвтоЗаполнениеДоступныхПолей = Истина; //для запроса
		
	Для каждого КолонкаТЗ Из ТЗ_ЖР.Колонки Цикл //для ТЗ
		НовоеПоле = НаборДанныхЗапросСКД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.ТипЗначения = КолонкаТЗ.ТипЗначения; 
		НовоеПоле.Заголовок = КолонкаТЗ.Заголовок;
		НовоеПоле.ПутьКданным = КолонкаТЗ.Имя;
		НовоеПоле.Поле = КолонкаТЗ.Имя; 
 
		//оформление
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("Размещение",ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяВысота",20);
	КонецЦикла;
	
	//Получить инициализированные настройки	
	ИсточникДоступныхНастроекКомпоновкиДанных = новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек = новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
		
	//настройки вывода
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления","Зеленый");  //БиблиотекаМакетовОформленияКомпоновкиДанных.Зеленый
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов",АвтоПозицияРесурсовКомпоновкиДанных.НеИспользовать); 
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов",РасположениеИтоговКомпоновкиДанных.Нет);
	
	//ВЫБРАННЫЕ ПОЛЯ
	ГруппировкаКД = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));	
	
	//Выбранные элементы	
	Для каждого КолонкаТЗ Из ТЗ_ЖР.Колонки Цикл
		
		Если КолонкаТЗ.Имя = "Событие" Тогда Продолжить; КонецЕсли; //выводим только представление события 
		Если КолонкаТЗ.Имя = "Пользователь" Тогда Продолжить; КонецЕсли; //выводим только имя пользователя
		
		НовВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);

		ПолеГруппировки = ГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
		ПолеГруппировки.Использование      = Истина;
		ПолеГруппировки.Поле               = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
	КонецЦикла;
	
	
	//сортировка результата
	НовЭлПорядка = ГруппировкаКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовЭлПорядка.Поле = Новый ПолеКомпоновкиДанных("Дата");НовЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
		
	//------------------------------------------------------------------------------
	//Формирование и отправка отчета по почте
	//------------------------------------------------------------------------------ 
	
	//Вывести отчет в ТД
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновки, , ,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТДРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТДРезультат.ВысотаТаблицы < 2 Тогда
		//нет данных
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - нет данных для отправки"+Символы.ПС;
	Иначе
		//есть данные, отправить в письме 
		
		Вложения = новый Массив;		
		//через поток в памяти
		//ПотокФайла = Новый ПотокВПамяти();
		//ТДРезультат.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.XLSX);
		//ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();	
		//Вложения.Добавить(Новый структура("Представление,АдресВоВременномХранилище",ТемаСообщения+".xlsx",ДвоичныеДанныеФайла)); 
		//ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
		
		//в тело письма HTMLТекстОтчета
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
		ТДРезультат.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.HTML);
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
		HTMLТекстОтчета = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла); 
		ТекстСообщения = ТекстСообщения + Символы.ПС + HTMLТекстОтчета;
		ТипТекста = ТипТекстаПочтовогоСообщения.HTML; 
		
		Алгоритм("ОтправитьEmail",ЗапросСсылка,ПочтаПолучателей,ТемаСообщения,ТекстСообщения,ТипТекста,ГуидУчетнойЗаписиПочты,Вложения);
		
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - сообщения отправлены"+Символы.ПС;
	КонецЕсли;	
	
	Если не Отладка Тогда
		УстановитьДатуПоследнейВыгрузки(Система,ЗапросСсылка,ДатаНачалаВыгрузки);
	КонецЕсли;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': null,
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);	
МаксКолвоСобытий = params.МаксКолвоСобытий;

//ЖР
ТЗ_ЖР = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала = Новый Структура;
СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
СтруктураОтбораЖурнала.Вставить("Комментарий","[Неотложное");
ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
	
Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР",ТЗ_ЖР));',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СДляСистемыПоРегЗаданиям',
     'Разделитель': null,
     'ЗначениеСтрока': '		ДатаНачала = Дата(params.ДатаНачала);   
		МаксКолвоСобытий = params.МаксКолвоСобытий;
		
		Если НЕ params.Свойство("СтрокаГуидИсключенияРегЗаданий")  тогда
			МассивГуидИсключенияРегЗаданий = Новый Массив;
		Иначе
			МассивГуидИсключенияРегЗаданий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(params.СтрокаГуидИсключенияРегЗаданий, ";", Истина);
		КонецЕсли; 
		
		// Получаем рег задания ИБ
		Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
		
		МассивМетаданных = Новый Массив;
		
		// Сфоримровать массив неиспользуемые рег задания
		Для каждого РегЗадание Из Регламентные Цикл             
			Если НЕ РегЗадание.Использование Тогда 
				Продолжить;
			КонецЕсли;
			Если МассивГуидИсключенияРегЗаданий.Найти(Строка(РегЗадание.УникальныйИдентификатор)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивМетаданных.Добавить("РегламентноеЗадание." + РегЗадание.Метаданные.Имя); 
		КонецЦикла;

		//ЖР
		ТЗ_ЖР = Новый ТаблицаЗначений; 
		
		СтруктураОтбораЖурнала = Новый Структура;
		СтруктураОтбораЖурнала.Вставить("ДатаНачала", ДатаНачала);
		СтруктураОтбораЖурнала.Вставить("Уровень", УровеньЖурналаРегистрации.Ошибка);
		СтруктураОтбораЖурнала.Вставить("Событие", "_$Job$_.Error");
		СтруктураОтбораЖурнала.Вставить("Метаданные", МассивМетаданных);
		
		ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных,Метаданные,Данные";
		
		ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
		
		Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР",ТЗ_ЖР));',
     'Комментарий': ''
    },
    {
     'Имя': 'ГуидИсключенийРегЗаданий',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a12cef295ee2b5a311ed073efc4c2983',
     'ЗначениеСтрока': '',
     'Комментарий': ''
    }
   ]
  }
 ]
}
