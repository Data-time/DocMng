{
 'Реквизиты': {
  'Наименование': 'Контроль - сбор и отправка ошибок из журнала',
  'ТекстОбработки': '	//------------------------------------------------------------------------------
	//ПАРАМЕТРЫ                                          
	//------------------------------------------------------------------------------
	Отладка = Ложь; 
	ДатаНачалаВыгрузкиОтладка = НачалоДня(ТекущаяДата());  
	
	ДатаНачалаВыгрузки = ТекущаяДата();
	МаксКоличествоДнейЖРНазад = 60;  
	МаксКолвоСобытий = 2000; //не более 2000 событий
	ТемаСообщения = ""+Система+" - ошибки ЖР от "+Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy");  
	
	ПочтаПолучателей = "group1c@t-medica.com"; 
	
	ДопПолучатели = ПолучитьЗначениеПеременной(Переменные,"ПолучателиПоСистеме",Система);
	Если ЗначениеЗаполнено(ДопПолучатели) Тогда  
		ПочтаПолучателей = ПочтаПолучателей + ", "+ДопПолучатели;
	КонецЕсли;
	  
	ГуидУчетнойЗаписиПочты = "567e3146-123f-11ed-a12c-ef295ee2b5a3"; //системная
	 
    Если Отладка Тогда 
    	ПочтаПолучателей = "ssmirnov@t-medica.com";
    КонецЕсли;
	
	СимволПереносаСтроки = Символы.ПС + Символы.ВК;
	ТекстСообщения = "Ошибки ЖР на " + Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy")+" во вложенном файле"+СимволПереносаСтроки+СимволПереносаСтроки+
		"Если в журнале видите лишние события, на которые не нужно обращать внимания, пишите Смирнову Сергею, я отключу их рассылку"+СимволПереносаСтроки+
		"Для отключений событий по пользователю, установите ему в системе признак ""ПользовательАдминистратор1С"" или папку ""Администратор"" (в зависимости от системы)";

	//произвольные отборы накладываются ниже
	
	
	 
	
	//------------------------------------------------------------------------------
	//Сбор ЖР
	//------------------------------------------------------------------------------
	ДанныеПоследнейВыгрузки = ПолучитьДанныеПоследнейВыгрузки(Система,ЗапросСсылка.Ссылка);
	ДатаНачала = Макс(ДанныеПоследнейВыгрузки.Дата,НачалоДня(ДатаНачалаВыгрузки)-86400*МаксКоличествоДнейЖРНазад); //не ранее чем за последние X дней 
	
	Если Отладка И ЗначениеЗаполнено(ДатаНачалаВыгрузкиОтладка) Тогда 
		ДатаНачала = ДатаНачалаВыгрузкиОтладка;
	КонецЕсли;
	
	//------------------------------------------------------------------------------
	//Запрос в базу
	//------------------------------------------------------------------------------ 
	Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы",Система);
	Если Код1СДляИсистемы = Неопределено Тогда 		
		Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы"); //общее
	КонецЕсли;
	  
	ПараметрыHTTPЗапроса = новый структура("ДатаНачала,МаксКолвоСобытий",ДатаНачала,МаксКолвоСобытий);
	СтруктураЗапроса = Новый Структура("value,params",Код1СДляИсистемы,ПараметрыHTTPЗапроса);	
			
	ЗаписьJSON = Новый ЗаписьJSON;ЗаписьJSON.УстановитьСтроку();ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);			
	СтрокаТелаЗапроса = ЗаписьJSON.Закрыть();
		
	HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса+"?DateParamsNames=ДатаНачала");     
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	HTTPОтвет = Соединение.HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
	РезультатРазбораHTTP = Алгоритм("ПрочитатьОтветСервисаUniversal",HTTPОтвет); 
	Если не РезультатРазбораHTTP.Успешно Тогда 
		ВызватьИсключение РезультатРазбораHTTP.Результат;
	КонецЕсли;

	СтруктураРезультатЗапросаHTTP = ЗначениеИзСтрокиВнутр(РезультатРазбораHTTP.Результат);
	ТЗ_ЖР = СтруктураРезультатЗапросаHTTP.ТЗ_ЖР;
	МассивИменАдминов = СтруктураРезультатЗапросаHTTP.МассивИменАдминов;
 	
 	ТЗ_ЖР.Колонки.Вставить(1,"Количество");
	ТЗ_ЖР.ЗаполнитьЗначения(1,"Количество");
	
	//сокращенный комментарий
	ТЗ_ЖР.Колонки.Вставить(ТЗ_ЖР.Колонки.Индекс(ТЗ_ЖР.Колонки.Комментарий),"КомментарийСокр",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(700)));
    ТЗ_ЖР.ЗагрузитьКолонку(ТЗ_ЖР.ВыгрузитьКолонку("Комментарий"),"КомментарийСокр");
 		
	//------------------------------------------------------------------------------
	//СКД
	//------------------------------------------------------------------------------
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные", ТЗ_ЖР);
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";ИсточникДанных.ТипИсточникаДанных = "Local";     
	
	НаборДанныхЗапросСКД = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")); //НаборДанныхЗапросСхемыКомпоновкиДанных
	НаборДанныхЗапросСКД.Имя = "НаборДанных1";
	//НаборДанныхЗапросСКД.Запрос = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
	НаборДанныхЗапросСКД.ИмяОбъекта = "ТЗДанные";
	НаборДанныхЗапросСКД.ИсточникДанных = "ИсточникДанных1";
	//НаборДанныхЗапросСКД.АвтоЗаполнениеДоступныхПолей = Истина; //для запроса
		
	Для каждого КолонкаТЗ Из ТЗ_ЖР.Колонки Цикл //для ТЗ
		НовоеПоле = НаборДанныхЗапросСКД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.ТипЗначения = КолонкаТЗ.ТипЗначения; 
		НовоеПоле.Заголовок = КолонкаТЗ.Заголовок;
		НовоеПоле.ПутьКданным = КолонкаТЗ.Имя;
		НовоеПоле.Поле = КолонкаТЗ.Имя;
		
		Если КолонкаТЗ.Имя = "Дата" Тогда 
			ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
    		ПолеРесурса.ПутьКДанным = КолонкаТЗ.Имя;
    		ПолеРесурса.Выражение = "МАКСИМУМ("+КолонкаТЗ.Имя+")";
    	ИначеЕсли КолонкаТЗ.Имя = "Количество" Тогда 
			ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
    		ПолеРесурса.ПутьКДанным = КолонкаТЗ.Имя;
    		ПолеРесурса.Выражение = "КОЛИЧЕСТВО("+КолонкаТЗ.Имя+")";
    	КонецЕсли; 
 
		//оформление
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("Размещение",ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяВысота",20);
	КонецЦикла;
	
	//Получить инициализированные настройки	
	ИсточникДоступныхНастроекКомпоновкиДанных = новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек = новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
		
	//настройки вывода
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления","Зеленый");  //БиблиотекаМакетовОформленияКомпоновкиДанных.Зеленый
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов",АвтоПозицияРесурсовКомпоновкиДанных.НеИспользовать); 
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов",РасположениеИтоговКомпоновкиДанных.Нет);
	
	//ВЫБРАННЫЕ ПОЛЯ
	ГруппировкаКД = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));	
	
	//Выбранные элементы	
	Для каждого КолонкаТЗ Из ТЗ_ЖР.Колонки Цикл
		
		Если КолонкаТЗ.Имя = "Комментарий" Тогда Продолжить; КонецЕсли; //выводим только сокращенный комментарий
		Если КолонкаТЗ.Имя = "Событие" Тогда Продолжить; КонецЕсли; //выводим только представление события 
		Если КолонкаТЗ.Имя = "Пользователь" Тогда Продолжить; КонецЕсли; //выводим только имя пользователя
		
		НовВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);

		Если КолонкаТЗ.Имя <> "Дата" и КолонкаТЗ.Имя <> "Количество" Тогда
			ПолеГруппировки = ГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
			ПолеГруппировки.Использование      = Истина;
			ПолеГруппировки.Поле               = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		КонецЕсли;
		
	КонецЦикла;
	
	
	//сортировка результата
	НовЭлПорядка = ГруппировкаКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовЭлПорядка.Поле = Новый ПолеКомпоновкиДанных("Дата");НовЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
	//------------------------------------------------------------------------------
	//ОТБОРЫ СКД
	//------------------------------------------------------------------------------     
	
	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"невозможно изменить в запрещенном периоде");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"невозможно поместить в запрещенный период");		 
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Операция не может быть выполнена из-за несоответствия версии"); 
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Данные были изменены или удалены другим пользователем");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Нет товаров, доступных для отгрузки"); //УТ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"по причине:" + Символы.ПС + "Не удалось провести");		
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Ошибка совместного доступа к файлу");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Нарушение общих настроек доступа при расширении рабочей группы"); //ДО
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Процесс не может получить доступ к файлу, так как этот файл занят другим процессом");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Не требуется вводить счет на оплату на основании документа"); //УТ 	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Нет услуг с вариантом оформления"); //УТ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Действие недоступно, так как файл % занят для редактирования");		
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Помеченный на удаление документ не может быть проведен!"); //УХ, УТ, ДО	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Не удалось сделать непроведенным"); //УХ, УТ, ДО
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Ошибка доступа к файлу");  //УХ, УТ, ДО  
    Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Недостаточно прав для выполнения операции с файлом");  //УХ, УТ, ДО
    Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Документ отправлен на согласование. Добавлять файлы могут только участники согласования");  //ДО    
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Данные файла недоступны, т.к. возможно файл был очищен как ненужный"); //БСП
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеРавно,"Некорректный результат формирования отчета: отсутствует Результат"); //БСП 
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Слишком сложный поисковый запрос"); //БСП

	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Работа с контрагентами.");  //УХ, УТ, ДО
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Электронное взаимодействие");  //УХ, УТ, ДО
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"Преобразование ошибки сервиса в структуру");  //УХ, УТ, ДО	
    Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Обновление шаблонов Росстата");  //БП 
        
    Код1СОтборыПоСистемам = ПолучитьЗначениеПеременной(Переменные,"Код1СОтборыПоСистемам",Система);
	Если ЗначениеЗаполнено(Код1СОтборыПоСистемам) Тогда  
		Выполнить(Код1СОтборыПоСистемам);
	КонецЕсли;	
		
	//Не выводить ошибки спец пользователей
	Для каждого ИмяАдмина из МассивИменАдминов Цикл  
		Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"ИмяПользователя",ВидСравненияКомпоновкиДанных.НеРавно,ИмяАдмина);
	КонецЦикла;
	
		
	//------------------------------------------------------------------------------
	//Формирование и отправка отчета по почте
	//------------------------------------------------------------------------------ 
	
	//Вывести отчет в ТД
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновки, , ,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТДРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТДРезультат.ВысотаТаблицы < 2 Тогда
		//нет данных
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - нет данных для отправки"+Символы.ПС;
	Иначе
		//есть данные, отправить в письме 
		
		Вложения = новый Массив;		
		//через поток в памяти
		//ПотокФайла = Новый ПотокВПамяти();
		//ТДРезультат.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.XLSX);
		//ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();	
		//Вложения.Добавить(Новый структура("Представление,АдресВоВременномХранилище",ТемаСообщения+".xlsx",ДвоичныеДанныеФайла)); 
		//ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
		
		//в тело письма HTMLТекстОтчета
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
		ТДРезультат.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.HTML);
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
		HTMLТекстОтчета = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла); 
		ТекстСообщения = ТекстСообщения + Символы.ПС + HTMLТекстОтчета;
		ТипТекста = ТипТекстаПочтовогоСообщения.HTML; 
		
		Алгоритм("ОтправитьEmail",ЗапросСсылка,ПочтаПолучателей,ТемаСообщения,ТекстСообщения,ТипТекста,ГуидУчетнойЗаписиПочты,Вложения);
		
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - сообщения отправлены"+Символы.ПС;
	КонецЕсли;	
	
	Если не Отладка Тогда
		УстановитьДатуПоследнейВыгрузки(Система,ЗапросСсылка,ДатаНачалаВыгрузки);
	КонецЕсли;',
  'Комментарий': 'СКД программно, результат в тело письма или как вложение.
ЖР с группировкой'
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': null,
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);	
МаксКолвоСобытий = params.МаксКолвоСобытий;

//ЖР
ТЗ_ЖР = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала = Новый Структура;
СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

//Спец пользователи
МассивИменАдминов = Новый Массив;
ЗапросАдминов = Новый Запрос; 
ЗапросАдминов.Текст = "ВЫБРАТЬ
|	ПользователиДополнительныеРеквизиты.Ссылка.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
|	ИЗ
|		Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
|	ГДЕ
|		ПользователиДополнительныеРеквизиты.Свойство = &ДопСвойство
|		И ЕСТЬNULL(ПользователиДополнительныеРеквизиты.Значение, ЛОЖЬ) = ИСТИНА";	
СвойствоРазработчикАналитик = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ПользовательАдминистратор1С"); 
ЗапросАдминов.УстановитьПараметр("ДопСвойство",СвойствоРазработчикАналитик);   	
ВыборкаАдминов = ЗапросАдминов.Выполнить().Выбрать();	
Пока ВыборкаАдминов.Следующий() Цикл
	ТекПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаАдминов.ИдентификаторПользователяИБ);
	Если ТекПользовательИБ <> Неопределено Тогда  
		МассивИменАдминов.Добавить(ТекПользовательИБ.Имя);	
	КонецЕсли;
КонецЦикла;  
	
Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР,МассивИменАдминов",ТЗ_ЖР,МассивИменАдминов));',
     'Комментарий': 'Общее'
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a1389a1477d34aa711ed64de66f52e6d',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);   
МаксКолвоСобытий = params.МаксКолвоСобытий;

//ЖР
ТЗ_ЖР = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала = Новый Структура;
СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

//Спец пользователи  

МассивИменАдминов = Новый Массив;
ЗапросАдминов = Новый Запрос; 
ЗапросАдминов.Текст = "ВЫБРАТЬ
|	Пользователи.Код КАК КодПользователя
|ИЗ
|	Справочник.Пользователи КАК Пользователи
|ГДЕ
|	Пользователи.Родитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
|	И Пользователи.Родитель.Наименование = ""Администраторы""";

     
МассивИменАдминов = ЗапросАдминов.Выполнить().Выгрузить().ВыгрузитьКолонку("КодПользователя");

Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР,МассивИменАдминов",ТЗ_ЖР,МассивИменАдминов));',
     'Комментарий': 'Вместо доп свойств - папки'
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede342c76fecdd',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);   
    МаксКолвоСобытий = params.МаксКолвоСобытий;

    //ЖР
    ТЗ_ЖР = Новый ТаблицаЗначений; 
    СтруктураОтбораЖурнала = Новый Структура;
    СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
    СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
    ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
    ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

    //Спец пользователи  

    МассивИменАдминов = Новый Массив;
    ЗапросАдминов = Новый Запрос; 
    ЗапросАдминов.Текст = "ВЫБРАТЬ
    |   Пользователи.Код КАК КодПользователя
    |ИЗ
    |   Справочник.Пользователи КАК Пользователи
    |ГДЕ
    |   Пользователи.Родитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
    |   И Пользователи.Родитель.Наименование = ""Администраторы""";

         
    МассивИменАдминов = ЗапросАдминов.Выполнить().Выгрузить().ВыгрузитьКолонку("КодПользователя");

    Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР,МассивИменАдминов",ТЗ_ЖР,МассивИменАдминов));',
     'Комментарий': 'Вместо доп свойств - папки'
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede40e8bb9e0ed',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);   
    МаксКолвоСобытий = params.МаксКолвоСобытий;

    //ЖР
    ТЗ_ЖР = Новый ТаблицаЗначений; 
    СтруктураОтбораЖурнала = Новый Структура;
    СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
    СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
    ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
    ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

    //Спец пользователи  

    МассивИменАдминов = Новый Массив;
    ЗапросАдминов = Новый Запрос; 
    ЗапросАдминов.Текст = "ВЫБРАТЬ
    |   Пользователи.Код КАК КодПользователя
    |ИЗ
    |   Справочник.Пользователи КАК Пользователи
    |ГДЕ
    |   Пользователи.Родитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
    |   И Пользователи.Родитель.Наименование = ""Администраторы""";

         
    МассивИменАдминов = ЗапросАдминов.Выполнить().Выгрузить().ВыгрузитьКолонку("КодПользователя");

    Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР,МассивИменАдминов",ТЗ_ЖР,МассивИменАдминов));',
     'Комментарий': 'Вместо доп свойств - папки'
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14587575112374c11edefe38874ea52',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);   
    МаксКолвоСобытий = params.МаксКолвоСобытий;

    //ЖР
    ТЗ_ЖР = Новый ТаблицаЗначений; 
    СтруктураОтбораЖурнала = Новый Структура;
    СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
    СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
    ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
    ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

    //Спец пользователи  

    МассивИменАдминов = Новый Массив;
    ЗапросАдминов = Новый Запрос; 
    ЗапросАдминов.Текст = "ВЫБРАТЬ
                          | ГруппыПользователейСостав.Пользователь.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
                          |ИЗ
                          | Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
                          |ГДЕ
                          | ГруппыПользователейСостав.Ссылка.Наименование = ""Администраторы""";
    Выборка = ЗапросАдминов.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
        НайденныйПольз = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
        Если НайденныйПольз = Неопределено Тогда
            Продолжить;
        КонецЕсли;
        МассивИменАдминов.Добавить(НайденныйПольз.Имя);
    КонецЦикла;
         
    Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР,МассивИменАдминов",ТЗ_ЖР,МассивИменАдминов));',
     'Комментарий': 'Вместо доп свойств - группы польз'
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14587575112374c11edefe3e05f19e3',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);   
МаксКолвоСобытий = params.МаксКолвоСобытий;

//ЖР
ТЗ_ЖР = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала = Новый Структура;
СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

//Спец пользователи
МассивИменАдминов = Новый Массив;
ЗапросАдминов = Новый Запрос; 
ЗапросАдминов.Текст = "ВЫБРАТЬ
|   ПользователиДополнительныеРеквизиты.Ссылка.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
|   ИЗ
|       Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
|   ГДЕ
|       ПользователиДополнительныеРеквизиты.Свойство = &ДопСвойство
|       И ЕСТЬNULL(ПользователиДополнительныеРеквизиты.Значение, ЛОЖЬ) = ИСТИНА";   
СвойствоРазработчикАналитик = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Администратор 1С (Пользователь)",Истина); 
ЗапросАдминов.УстановитьПараметр("ДопСвойство",СвойствоРазработчикАналитик);    
ВыборкаАдминов = ЗапросАдминов.Выполнить().Выбрать();   
Пока ВыборкаАдминов.Следующий() Цикл
    ТекПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаАдминов.ИдентификаторПользователяИБ);
    Если ТекПользовательИБ <> Неопределено Тогда  
        МассивИменАдминов.Добавить(ТекПользовательИБ.Имя);  
    КонецЕсли;
КонецЦикла;  
    
Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР,МассивИменАдминов",ТЗ_ЖР,МассивИменАдминов));',
     'Комментарий': 'поиск по заголовку доп свойства'
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14987575112374c11edf979bff7c576',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);   
    МаксКолвоСобытий = params.МаксКолвоСобытий;

    //ЖР
    ТЗ_ЖР = Новый ТаблицаЗначений; 
    СтруктураОтбораЖурнала = Новый Структура;
    СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
    СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
    ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
    ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

    //Спец пользователи  

    МассивИменАдминов = Новый Массив;
    ЗапросАдминов = Новый Запрос; 
    ЗапросАдминов.Текст = "ВЫБРАТЬ
    |   Пользователи.Код КАК КодПользователя
    |ИЗ
    |   Справочник.Пользователи КАК Пользователи
    |ГДЕ
    |   Пользователи.Родитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
    |   И Пользователи.Родитель.Наименование = ""Администраторы""";

         
    МассивИменАдминов = ЗапросАдминов.Выполнить().Выгрузить().ВыгрузитьКолонку("КодПользователя");

    Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР,МассивИменАдминов",ТЗ_ЖР,МассивИменАдминов));',
     'Комментарий': 'Вместо доп свойств - папки'
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14587575112374c11edefe40d317402',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);   
МаксКолвоСобытий = params.МаксКолвоСобытий;

//ЖР
ТЗ_ЖР = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала = Новый Структура;
СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
СтруктураОтбораЖурнала.Вставить("Уровень",УровеньЖурналаРегистрации.Ошибка);
ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

//Спец пользователи
МассивИменАдминов = Новый Массив;
ЗапросАдминов = Новый Запрос; 
ЗапросАдминов.Текст = "ВЫБРАТЬ
                      |	Пользователи.Ссылка.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
                      |ИЗ
                      |	Справочник.Пользователи КАК Пользователи
                      |ГДЕ
                      |	Пользователи.Администратор1С";   
ВыборкаАдминов = ЗапросАдминов.Выполнить().Выбрать();   
Пока ВыборкаАдминов.Следующий() Цикл
    ТекПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаАдминов.ИдентификаторПользователяИБ);
    Если ТекПользовательИБ <> Неопределено Тогда  
        МассивИменАдминов.Добавить(ТекПользовательИБ.Имя);  
    КонецЕсли;
КонецЦикла;  
    
Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР,МассивИменАдминов",ТЗ_ЖР,МассивИменАдминов));',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СОтборыПоСистемам',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a1a9b0bbcb94d77911eeaecec68306f3',
     'ЗначениеСтрока': '//++ СЭДО
МассивСобытийСЭДО = Новый Массив;
МассивСобытийСЭДО.Добавить("Электронный документооборот с контролирующими органами. Обмен с СЭДО СФР");
МассивСобытийСЭДО.Добавить("Электронный документооборот с контролирующими органами. Получение данных СЭДО СФР");
МассивСобытийСЭДО.Добавить("Электронный документооборот с контролирующими органами. Длительная операция");
МассивСобытийСЭДО.Добавить("Автоматический обмен с СЭДО СФР (бывш. ФСС)");
МассивСобытийСЭДО.Добавить("Автоматический обмен с СЭДО СФР");
//ТекГруппа = Алгоритм("ДобавитьГруппуОтбора",НастройкиКомпоновки.Отбор,ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппа,"Событие",ВидСравненияКомпоновкиДанных.ВСписке,МассивСобытийСЭДО);
//ТекГруппаИЛИ = Алгоритм("ДобавитьГруппуОтбора",ТекГруппа,ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"код состояния 404");
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"Возможно, сервер перегружен");
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"код состояния 50"); //500, 503, 504...
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"рекомендуется повторить запрос"); 
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"Превышено время ожидания"); 
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"Подробную информацию об ошибках см. в технологическом журнале");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеВСписке,МассивСобытийСЭДО);


Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"При получении данных СЭДО СФР (бывш. ФСС) происходили ошибки. Подробную информацию об ошибках см. в технологическом журнале");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"В регламентном задании загрузки списка входящих сообщений СЭДО СФР (бывш. ФСС) происходили ошибки");
//-- СЭДО


Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"недостаточно прав для работы с утвержденным документом");',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СОтборыПоСистемам',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a13dead7fd359bbb11edadcb419e5d65',
     'ЗначениеСтрока': '//++ СЭДО
МассивСобытийСЭДО = Новый Массив;
МассивСобытийСЭДО.Добавить("Электронный документооборот с контролирующими органами. Обмен с СЭДО СФР");
МассивСобытийСЭДО.Добавить("Электронный документооборот с контролирующими органами. Получение данных СЭДО СФР");
МассивСобытийСЭДО.Добавить("Электронный документооборот с контролирующими органами. Длительная операция");
МассивСобытийСЭДО.Добавить("Автоматический обмен с СЭДО СФР (бывш. ФСС)");
МассивСобытийСЭДО.Добавить("Автоматический обмен с СЭДО СФР");
//ТекГруппа = Алгоритм("ДобавитьГруппуОтбора",НастройкиКомпоновки.Отбор,ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе);
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппа,"Событие",ВидСравненияКомпоновкиДанных.ВСписке,МассивСобытийСЭДО);
//ТекГруппаИЛИ = Алгоритм("ДобавитьГруппуОтбора",ТекГруппа,ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"код состояния 404");
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"Возможно, сервер перегружен");
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"код состояния 50"); //500, 503, 504...
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"рекомендуется повторить запрос"); 
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"Превышено время ожидания"); 
//Алгоритм("ДобавитьЭлементОтбора",ТекГруппаИЛИ,"Комментарий",ВидСравненияКомпоновкиДанных.Содержит,"Подробную информацию об ошибках см. в технологическом журнале");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеВСписке,МассивСобытийСЭДО);


Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"При получении данных СЭДО СФР (бывш. ФСС) происходили ошибки. Подробную информацию об ошибках см. в технологическом журнале");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"В регламентном задании загрузки списка входящих сообщений СЭДО СФР (бывш. ФСС) происходили ошибки");
//-- СЭДО


Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"недостаточно прав для работы с утвержденным документом");',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СОтборыПоСистемам',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a12cef295ee2b5a311ed073efc4c2983',
     'ЗначениеСтрока': 'Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеРавно,"{""S"",""""}");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Рекомендуется перезапустить исполняющиеся процессы после завершени");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеРавно,"Нет доступных аналитик для расшифровки!");  
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"У текущего пользователя недостаточно прав для отмены согласования");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Отменить проведение заявок, находящихся на исполнении или уже исполненных, может только суперпользовател");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Задачи были выполнены ранее."); 
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"У пользователя недостаточно прав для отмены согласования");  
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Нет данных для счета-фактуры на аванс или на суммовую разницу");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"ПретензионноИсковаяРабота");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"Проверка выгрузки платежей");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"Протокол ошибок при согласовании документов");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"УПСК.Разбор сообщения");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Пользователь отказался от проверки файла выгрузки платежей в Клиенте банка");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"превышает максимально допустимый размер файла");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Помещение файла невозможно, повторите попытку позднее"); 
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Требуется записать объект перед отправкой на согласование. Операция отменена.");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеРавно,"Некорректный результат формирования отчета: отсутствует Результат");',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СОтборыПоСистемам',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11edd9dff20505ec',
     'ЗначениеСтрока': 'Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"Интеграция с 1С:Документооборотом");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"УПСК.Разбор сообщения");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Ответ УПСК не получен или содержит ошибки. Сообщение обмена не записано");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"execution error: alfa-get-statement command timeout");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"Некорректный результат формирования отчета: отсутствует Результат");',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СОтборыПоСистемам',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14587575112374c11edefe3e05f19e3',
     'ЗначениеСтрока': 'Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Статус заявки должен быть ");',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СОтборыПоСистемам',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede342c76fecdd',
     'ЗначениеСтрока': 'Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"Диадок.Автообновление");
Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"Диадок");',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СОтборыПоСистемам',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a12cef295ee2b5a311ed073f0fbbf2f6',
     'ЗначениеСтрока': 'Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Нет разрешения на создание документов данного вида.");',
     'Комментарий': ''
    }
   ]
  }
 ]
}
