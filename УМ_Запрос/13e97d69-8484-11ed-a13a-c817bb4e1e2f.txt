{
 'Реквизиты': {
  'Наименование': 'Отправка заявок в УХ',
  'ТекстОбработки': 'СтрокаОшибок = "";
	
Узел = ПланыОбмена.ИнтегрированныеСистемы.НайтиПоРеквизиту("Идентификатор","01d86b4e-9605-4df6-8d45-043a0a105895"); 
Отладка = Ложь;
  
ДатаСозданияС = НачалоДня(ТекущаяДата())-3*86400; //пытаемся отправить только 3 дня. Затем выгрузку считаем неудачной и ждем администратора для решения проблемы
Обработано = 0;
Выгружено = 0;
ДатаВыгрузки = ТекущаяДата();   

МассивСсылок = Новый Массив;
	
//-------------------------------------------------------------------- 
//Проверка параметров
//-------------------------------------------------------------------- 
	
	Если не ЗначениеЗаполнено(Узел) Тогда
		Успешно = Ложь;
		ВызватьИсключение "Не найден узел УХ";   
	КонецЕсли;
	Если не ЗначениеЗаполнено(Узел.АдресВебСервиса) ИЛИ СтрНайти(Узел.АдресВебСервиса,"http") = 0 Тогда
		Успешно = Ложь;
		ВызватьИсключение "Некорректно заполнен адрес веб-сервиса узла УХ";
	КонецЕсли; 
	
	ДанныеАвторизации = РегистрыСведений.ДанныеИнтегрированныхСистем.ДанныеАвторизации(Узел);
	
	МассивЧастейАдреса = СтрРазделить(Узел.АдресВебСервиса,"/",Ложь);
	СерверAPI = "tmssc-app.tmssc.ru";//МассивЧастейАдреса[1];
	АдресAPI =  МассивЧастейАдреса[2] + "/hs/DT_API_DocMng/SetPaymentRequests";
	
	//-------------------------------------------------------------------- 
	//Формирование запроса
	//--------------------------------------------------------------------
	СтруктураЗапроса = Новый структура("data",Новый Массив);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПредприятияИзменения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДокументыПредприятия.Изменения КАК ДокументыПредприятияИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
		|		ПО ДокументыПредприятияИзменения.Узел = СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы
		|			И (ДокументыПредприятияИзменения.Ссылка = (ВЫРАЗИТЬ(СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО КАК Справочник.ДокументыПредприятия)))
		|ГДЕ
		|	ДокументыПредприятияИзменения.Узел = &Узел
		|	И СвязиОбъектовИнтегрированныхСистем.УзелИнтегрированнойСистемы ЕСТЬ NULL
		|	И ДокументыПредприятияИзменения.Ссылка.ДатаСоздания >= &ДатаСозданияС";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("ДатаСозданияС", ДатаСозданияС);
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДокСсылка = Выборка.Ссылка; 
		СтруктураОбъекта = Новый Структура("ExtGUID,OrganizationINN,ContractorINN,ContractorKPP,sum,CurrencyCode,InitiatorName,Purpose,Deadline,Comment,ListArticleDDS,sumNDS");
		СтруктураОбъекта.ExtGUID = XMLСтрока(ДокСсылка);
		СтруктураОбъекта.OrganizationINN = ДокСсылка.Организация.ИНН;   
		Если ДокСсылка.Контрагенты.Количество() > 0 Тогда
			СтруктураОбъекта.ContractorINN = ДокСсылка.Контрагенты[0].Контрагент.ИНН; 
			СтруктураОбъекта.ContractorKPP = ДокСсылка.Контрагенты[0].Контрагент.КПП; 
		КонецЕсли;
		СтруктураОбъекта.sum = ДокСсылка.Сумма; 
		СтруктураОбъекта.CurrencyCode = ДокСсылка.Валюта.Код;
		Если ТипЗнч(ДокСсылка.Подготовил) = Тип("СправочникСсылка.Сотрудники") Тогда
			InitiatorName = Строка(Сотрудники.ФизЛицоСотрудника(ДокСсылка.Подготовил));
		ИначеЕсли ТипЗнч(ДокСсылка.Подготовил) = Тип("СправочникСсылка.Пользователи") Тогда
			InitiatorName = Строка(ПользователиДокументооборот.ФизЛицоПользователя(ДокСсылка.Подготовил));
		Иначе 
			InitiatorName = "";
		КонецЕсли;
		СтруктураОбъекта.InitiatorName = InitiatorName;
		
		СтруктураОбъекта.Purpose = ДокСсылка.Содержание;
		СтруктураОбъекта.Deadline = ДокСсылка.СрокИсполнения;
		
		ДопДанныеПоДокументу = Справочники.DT_Данные_ЗаявкаНаОплату.ПустаяСсылка();
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	DT_Данные_ЗаявкаНаОплату.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.DT_Данные_ЗаявкаНаОплату КАК DT_Данные_ЗаявкаНаОплату
			|ГДЕ
			|	DT_Данные_ЗаявкаНаОплату.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", ДокСсылка);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаDT_Данные = РезультатЗапроса.Выбрать();
		Пока ВыборкаDT_Данные.Следующий() Цикл
			ДопДанныеПоДокументу = ВыборкаDT_Данные.Ссылка;
		КонецЦикла;
		
		СтруктураОбъекта.Comment = СтрШаблон("%1 №%2 от %3",
											ДопДанныеПоДокументу.ВидЗаявки,
											ДопДанныеПоДокументу.НомерОснования,
											Формат(ДопДанныеПоДокументу.ДатаОснования,"ДФ=dd.MM.yyyy"));
											
											
		//ИндексЗначенияПеречисления = Перечисления.СтавкиНДС.Индекс(ДопДанныеПоДокументу.СтавкаНДС);
		//СтруктураОбъекта.rateNDS = Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		СтруктураОбъекта.sumNDS = ДокСсылка.СуммаНДС;
											
		СтруктураОбъекта.ListArticleDDS = Новый Массив;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтатьиДвиженияДенежныхСредствДокументов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	СтатьиДвиженияДенежныхСредствДокументов.Сумма КАК Сумма,
			|	СтатьиДвиженияДенежныхСредствДокументов.СуммаНДС КАК СуммаНДС,
			|	СтатьиДвиженияДенежныхСредствДокументов.DT_СтавкаНДС КАК DT_СтавкаНДС
			|ИЗ
			|	РегистрСведений.СтатьиДвиженияДенежныхСредствДокументов КАК СтатьиДвиженияДенежныхСредствДокументов
			|ГДЕ
			|	СтатьиДвиженияДенежныхСредствДокументов.Документ = &Документ";
		Запрос.УстановитьПараметр("Документ", ДокСсылка);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрутураСтроки = Новый Структура("ArticleDDS, Summ, SummNDS, VATRate");
			СтрутураСтроки.Summ = ВыборкаДетальныеЗаписи.Сумма;
			СтрутураСтроки.SummNDS = ВыборкаДетальныеЗаписи.СуммаНДС;    
			
			ИндексЗначенияПеречисления = Перечисления.СтавкиНДС.Индекс(ВыборкаДетальныеЗаписи.DT_СтавкаНДС);
			СтрутураСтроки.VATRate = Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
			
			СтрутураСтроки.ArticleDDS = "";
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СвязиОбъектовИнтегрированныхСистем.ИДВнешнегоОбъекта КАК ИДВнешнегоОбъекта
				|ИЗ
				|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК СвязиОбъектовИнтегрированныхСистем
				|ГДЕ
				|	СвязиОбъектовИнтегрированныхСистем.СсылкаНаОбъектДО = &СсылкаНаОбъектДО";
			Запрос.УстановитьПараметр("СсылкаНаОбъектДО", ВыборкаДетальныеЗаписи.СтатьяДвиженияДенежныхСредств);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка_Связи = РезультатЗапроса.Выбрать();
			Пока Выборка_Связи.Следующий() Цикл
				СтрутураСтроки.ArticleDDS = Выборка_Связи.ИДВнешнегоОбъекта;
			КонецЦикла;
			
			СтруктураОбъекта.ListArticleDDS.Добавить(СтрутураСтроки);
			
		КонецЦикла;
		СтруктураЗапроса.data.Добавить(СтруктураОбъекта);
		
		МассивСсылок.Добавить(ДокСсылка);
	КонецЦикла;
	
	Обработано = СтруктураЗапроса.data.Количество();

Если СтруктураЗапроса.data.Количество() > 0 Тогда	
	//-------------------------------------------------------------------- 
	//Отправка запроса
	//--------------------------------------------------------------------
	
	HTTPСоединение = Новый HTTPСоединение(
			"tmssc-app.tmssc.ru", // сервер (хост)
			8080, // порт, по умолчанию для http используется 80, для https 443
			ДанныеАвторизации.ИмяПользователя, // пользователь для доступа к серверу (если он есть)
			ДанныеАвторизации.Пароль, // пароль для доступа к серверу (если он есть)
			, // здесь указывается прокси, если он есть
			, // таймаут в секундах, 0 или пусто - не устанавливать
			,  // защищенное соединение, если используется https
			Ложь); //ИспользоватьАутентификациюОС
			
	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);			
	СтрокаТелаЗапроса = ЗаписьJSON.Закрыть();

	HTTPЗапрос = Новый HTTPЗапрос(АдресAPI); 
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	Результат = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	
	//-------------------------------------------------------------------- 
	//Получение ответа
	//--------------------------------------------------------------------
	
	Если СтрНачинаетсяС(ТекстОтвета,"<?xml") ИЛИ Результат.КодСостояния <> 200 Тогда
		Успешно = Ложь; 
		ВызватьИсключение "Ошибка вызова DT_API_DocMng: "+ТекстОтвета;	
	КонецЕсли; 

	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстОтвета);
	СтруктураОтвета = ПрочитатьJSON(Чтение);	
	Чтение.Закрыть(); 
	
	МассивОшибок = Новый Массив;
	
	Для каждого стр из СтруктураОтвета.Data Цикл
		Если ЗначениеЗаполнено(стр.GUIDTMF) Тогда
			//сделали соответствие
			ДокументДО = Справочники.ДокументыПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(стр.GuidDO));

			НаборЗаписей = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УзелИнтегрированнойСистемы.Установить(Узел);
			НаборЗаписей.Отбор.ИДВнешнегоОбъекта.Установить(стр.GUIDTMF);
			НаборЗаписей.Отбор.ТипВнешнегоОбъекта.Установить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
			НаборЗаписей.Отбор.СсылкаНаОбъектДО.Установить(ДокументДО);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.УзелИнтегрированнойСистемы = Узел;
			НоваяЗапись.ИДВнешнегоОбъекта = стр.GUIDTMF;
			НоваяЗапись.ТипВнешнегоОбъекта = "Документ.ЗаявкаНаРасходованиеДенежныхСредств";
			НоваяЗапись.СсылкаНаОбъектДО = ДокументДО;
			НаборЗаписей.Записать(); 
			   
			//присвоим номер
			Попытка
				СообщениеОбОшибкеРег = ""; 
				//Делопроизводство.ЗарегистрироватьПредмет(ДокументДО, СообщениеОбОшибкеРег, стр.number);
			Исключение
				ЗаписьЖурналаРегистрации("DT_Авторегистрация", УровеньЖурналаРегистрации.Ошибка,,ДокументДО, СообщениеОбОшибкеРег);
			КонецПопытки;
			
			Выгружено = Выгружено + 1;	
			//теперь этот документ не попадет в рассылку этим алгоритмом.
			//удалить регистрацию с узла обмена? или пусть отправится повторно?	
		Иначе
			МассивОшибок.Добавить("Не создан документ "+стр.GuidDO);	
		КонецЕсли;
	КонецЦикла; 
	
	
	Для каждого стр из СтруктураОтвета.Errors Цикл
		МассивОшибок.Добавить(стр.ErrorCode +" - "+стр.Text);		
	КонецЦикла;
	
	Если МассивОшибок.Количество()> 0 Тогда
		Успешно = Ложь;
		СтрокаОшибок = СтрокаОшибок + СтрСоединить(МассивОшибок,символы.ПС);
	КонецЕсли;
КонецЕсли;
	              
Если не Отладка Тогда
	УМ_ВнешниеПодключения.УстановитьДатуПоследнейВыгрузки(Система,ЗапросСсылка,ДатаВыгрузки);
КонецЕсли; 

СтрокаОшибок = СтрокаОшибок + ?(СтрокаОшибок="","",Символы.ПС)+ Система +  " Обработано - "+Обработано+". Выгружено - "+Выгружено;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': []
  }
 ]
}
