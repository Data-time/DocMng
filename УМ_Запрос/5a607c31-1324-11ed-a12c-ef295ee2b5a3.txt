{
 'Реквизиты': {
  'Наименование': 'Загрузка сотрудников DWH',
  'ТекстОбработки': '//-----------------------------------------------------------------
//Параметры выгрузки
//-----------------------------------------------------------------
Отладка = Ложь; 

//-----------------------------------------------------------------  
//Служебные параметры  
//----------------------------------------------------------------- 

ДатаЗагрузки = ТекущаяДата();
СистемаGUID = XMLСтрока(Система);   
ТекстЗапроса = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
СоединениеDWH = ПолучитьЗначениеПеременной(Переменные,"СоединениеDWH");
Если СоединениеDWH = неопределено Тогда
	ВызватьИсключение "Не заполнен параметр СоединениеDWH";
КонецЕсли;
СоединениеDWH = ПолучитьСоединениеПоПодключению(СоединениеDWH,СтрокаОшибок);
Если СоединениеDWH = неопределено Тогда
	ВызватьИсключение "Не выполнено соединение к DWH";
КонецЕсли;
	
//-----------------------------------------------------------------  
//Выполнение  
//----------------------------------------------------------------- 

//------------------------------------------------------------------------------
//Запрос в базу
//------------------------------------------------------------------------------ 
Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы");  
ПараметрыHTTPЗапроса = новый структура("ДатаЗагрузки",ДатаЗагрузки);
СтруктураЗапроса = Новый Структура("value,params",Код1СДляИсистемы,ПараметрыHTTPЗапроса);	
		
ЗаписьJSON = Новый ЗаписьJSON;ЗаписьJSON.УстановитьСтроку();ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);			
СтрокаТелаЗапроса = ЗаписьJSON.Закрыть();
	
HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса+"?DateParamsNames=ДатаЗагрузки");     
HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
HTTPОтвет = Соединение.HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
РезультатРазбораHTTP = Алгоритм("ПрочитатьОтветСервисаUniversal",HTTPОтвет); 
Если не РезультатРазбораHTTP.Успешно Тогда 
	ВызватьИсключение РезультатРазбораHTTP.Результат;
КонецЕсли;

ТЗ = ЗначениеИзСтрокиВнутр(РезультатРазбораHTTP.Результат);


//Дополнить данные
Для каждого стр из ТЗ Цикл
	Стр.Система = СистемаGUID;
	Стр.UUID = стр.Система+стр.GUID;
	Стр.ДатаЗагрузки = ДатаЗагрузки;
	 
	Стр.ОрганизацияUUID = DT_DWH.ПолучитьUUID(СистемаGUID,Стр.ОрганизацияUUID); 
	Стр.ПодразделениеUUID = DT_DWH.ПолучитьUUID(СистемаGUID,Стр.ПодразделениеUUID);
	Стр.ФизЛицоUUID = DT_DWH.ПолучитьUUID(СистемаGUID,Стр.ФизЛицоUUID);	
КонецЦикла;
	 
	
ПараметрыЗаписиВSQL = DT_DWH.ПараметрыЗаписиВSQL();
ПараметрыЗаписиВSQL.ТЗ = ТЗ; 
ПараметрыЗаписиВSQL.ИмяТаблицы = "Сотрудники"; 
ПараметрыЗаписиВSQL.Ключи.Добавить("UUID");
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("ВерсияДанных");
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("ПодразделениеGUID");
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("Должность");
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("ВидЗанятостиКод");
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("ДатаПриемаНаРаботу");
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("ДатаУвольнения");  
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("Состояние");
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("СостояниеДо");
	
СтруктураОтвета = DT_DWH.ЗаписатьТЗВSQL(СоединениеDWH,ПараметрыЗаписиВSQL);
 
	
Обработано = ТЗ.Количество();
Добавлено = СтруктураОтвета.Добавлено;
Обновлено = СтруктураОтвета.Обновлено;  
		
		
СтрокаОшибок = СтрокаОшибок + ?(СтрокаОшибок="","",Символы.ПС)+ Система +  " Обработано - "+Обработано+". Добавлено - "+Добавлено+". Обновлено - "+Обновлено;
	
Если не Отладка Тогда
	УстановитьДатуПоследнейЗагрузки(Система,ЗапросСсылка,ДатаЗагрузки);
КонецЕсли;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'СоединениеDWH',
     'Разделитель': null,
     'ЗначениеСтрока': '',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': null,
     'ЗначениеСтрока': 'ДатаЗагрузки = Дата(params.ДатаЗагрузки);

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	СостоянияСотрудниковСрезПоследних.Период КАК Период,
|	СостоянияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
|	СостоянияСотрудниковСрезПоследних.Год КАК Год,
|	СостоянияСотрудниковСрезПоследних.Состояние КАК Состояние,
|	СостоянияСотрудниковСрезПоследних.ВидВремени КАК ВидВремени,
|	СостоянияСотрудниковСрезПоследних.ДействуетДо КАК ДействуетДо,
|	СостоянияСотрудниковСрезПоследних.ОкончаниеПредположительно КАК ОкончаниеПредположительно
|ПОМЕСТИТЬ ВТСостоянияСотрудников
|ИЗ
|	РегистрСведений.СостоянияСотрудников.СрезПоследних КАК СостоянияСотрудниковСрезПоследних
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|			СостоянияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
|			МАКСИМУМ(СостоянияСотрудниковСрезПоследних.Год) КАК Год
|		ИЗ
|			РегистрСведений.СостоянияСотрудников.СрезПоследних(&ТекущаяДата, ) КАК СостоянияСотрудниковСрезПоследних
|		
|		СГРУППИРОВАТЬ ПО
|			СостоянияСотрудниковСрезПоследних.Сотрудник) КАК МаксГодыСреза
|		ПО СостоянияСотрудниковСрезПоследних.Сотрудник = МаксГодыСреза.Сотрудник
|			И СостоянияСотрудниковСрезПоследних.Год = МаксГодыСреза.Год
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник.Наименование КАК Наименование,
|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник.Ссылка КАК Ссылка,
|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник.Код КАК Код,
|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник.ПометкаУдаления КАК ПометкаУдаления,
|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник.ВерсияДанных КАК ВерсияДанных,
|	КадроваяИсторияСотрудниковИнтервальный.Организация.ИНН КАК ИННОрганизации,
|	КадроваяИсторияСотрудниковИнтервальный.Организация КАК Организация_Ссылка,
|	КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо КАК Физлицо_Ссылка,
|	КадроваяИсторияСотрудниковИнтервальный.Подразделение КАК Подразделение_Ссылка,
|	ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Должность.Наименование, """") КАК Должность,
|	ПРЕДСТАВЛЕНИЕ(ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости) КАК ВидЗанятости,
|	ЕСТЬNULL(ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости.Порядок, 99) КАК ВидЗанятостиКод,
|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаНаРаботу,
|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодДанных,
|	ЕСТЬNULL(ВТСостоянияСотрудников.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка)) КАК Состояние_Ссылка,
|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ВТСостоянияСотрудников.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка))) КАК СостояниеПредставление,
|	ВЫБОР
|		КОГДА ВТСостоянияСотрудников.ОкончаниеПредположительно ЕСТЬ NULL
|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
|		КОГДА ВТСостоянияСотрудников.ОкончаниеПредположительно <> ДАТАВРЕМЯ(1, 1, 1)
|			ТОГДА ВТСостоянияСотрудников.ОкончаниеПредположительно
|		ИНАЧЕ ВТСостоянияСотрудников.ДействуетДо
|	КОНЕЦ КАК СостояниеДо
|ИЗ
|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковИнтервальный
|		ПО КадроваяИсторияСотрудниковИнтервальный.Сотрудник = ВидыЗанятостиСотрудниковИнтервальный.Сотрудник
|			И (&ТекущаяДата <= ВидыЗанятостиСотрудниковИнтервальный.ДатаОкончания)
|			И (&ТекущаяДата >= ВидыЗанятостиСотрудниковИнтервальный.ДатаНачала)
|			И КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковИнтервальный.ГоловнаяОрганизация
|			И КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо = ВидыЗанятостиСотрудниковИнтервальный.ФизическоеЛицо
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
|		ПО КадроваяИсторияСотрудниковИнтервальный.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
|			И КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
|			И КадроваяИсторияСотрудниковИнтервальный.ГоловнаяОрганизация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияСотрудников КАК ВТСостоянияСотрудников
|		ПО КадроваяИсторияСотрудниковИнтервальный.Сотрудник = ВТСостоянияСотрудников.Сотрудник
|ГДЕ
|	КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания >= &ТекущаяДата
|	И КадроваяИсторияСотрудниковИнтервальный.ДатаНачала <= &ТекущаяДата";

Запрос.УстановитьПараметр("ТекущаяДата",ДатаЗагрузки);
Выборка = Запрос.Выполнить().Выбрать();
		              
ТЗ = новый ТаблицаЗначений;
ТЗ.Колонки.Добавить("UUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(72)));
ТЗ.Колонки.Добавить("Система",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("ДатаЗагрузки",Новый ОписаниеТипов("Дата"));
ТЗ.Колонки.Добавить("ВерсияДанных",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
ТЗ.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
ТЗ.Колонки.Добавить("ПометкаУдаления",Новый ОписаниеТипов("Булево"));
ТЗ.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));

ТЗ.Колонки.Добавить("ИННОрганизации",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("ФизЛицоUUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(72)));
ТЗ.Колонки.Добавить("ОрганизацияUUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(72)));
ТЗ.Колонки.Добавить("ПодразделениеUUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(72)));
ТЗ.Колонки.Добавить("Должность",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
ТЗ.Колонки.Добавить("ВидЗанятости",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
ТЗ.Колонки.Добавить("ВидЗанятостиКод",Новый ОписаниеТипов("Число",,));
ТЗ.Колонки.Добавить("ДатаПриемаНаРаботу",Новый ОписаниеТипов("Дата",,));
ТЗ.Колонки.Добавить("ДатаУвольнения",Новый ОписаниеТипов("Дата",,));

ТЗ.Колонки.Добавить("Состояние",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("СостояниеПредставление",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("СостояниеДо",Новый ОписаниеТипов("Дата"));
 

Пока Выборка.Следующий() Цикл
	НовСтр = ТЗ.Добавить();	
	ЗаполнитьЗначенияСвойств(НовСтр,Выборка);
		
	НовСтр.GUID = XMLСтрока(Выборка.Ссылка);
	НовСтр.ФизЛицоUUID = XMLСтрока(Выборка.Физлицо_Ссылка); 
	НовСтр.ОрганизацияUUID = XMLСтрока(Выборка.Организация_Ссылка);
	НовСтр.ПодразделениеUUID = XMLСтрока(Выборка.Подразделение_Ссылка);
	НовСтр.Состояние = XMLСтрока(Выборка.Состояние_Ссылка);
	
КонецЦикла;

result = ЗначениеВСтрокуВнутр(ТЗ);',
     'Комментарий': ''
    }
   ]
  }
 ]
}
