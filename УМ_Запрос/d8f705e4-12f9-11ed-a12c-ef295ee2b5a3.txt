{
 'Реквизиты': {
  'Наименование': 'Загрузка физических лиц DWH',
  'ТекстОбработки': '//-----------------------------------------------------------------
//Параметры выгрузки
//-----------------------------------------------------------------
Отладка = Ложь; 

//-----------------------------------------------------------------  
//Служебные параметры  
//----------------------------------------------------------------- 

ДатаЗагрузки = ТекущаяДата();
СистемаGUID = XMLСтрока(Система); 
ТекстЗапроса = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
СоединениеDWH = ПолучитьЗначениеПеременной(Переменные,"СоединениеDWH");
Если СоединениеDWH = неопределено Тогда
	ВызватьИсключение "Не заполнен параметр СоединениеDWH";
КонецЕсли;
СоединениеDWH = ПолучитьСоединениеПоПодключению(СоединениеDWH,СтрокаОшибок);
Если СоединениеDWH = неопределено Тогда
	ВызватьИсключение "Не выполнено соединение к DWH";
КонецЕсли;
	
//------------------------------------------------------------------------------
//Запрос в базу
//------------------------------------------------------------------------------ 
Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы"); 
СтруктураЗапроса = Новый Структура("value",Код1СДляИсистемы);	
		
ЗаписьJSON = Новый ЗаписьJSON;ЗаписьJSON.УстановитьСтроку();ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);			
СтрокаТелаЗапроса = ЗаписьJSON.Закрыть();
	
HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса);     
HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
HTTPОтвет = Соединение.HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
РезультатРазбораHTTP = Алгоритм("ПрочитатьОтветСервисаUniversal",HTTPОтвет); 
Если не РезультатРазбораHTTP.Успешно Тогда 
	ВызватьИсключение РезультатРазбораHTTP.Результат;
КонецЕсли;

ТЗ = ЗначениеИзСтрокиВнутр(РезультатРазбораHTTP.Результат);

//Дополнить данные
Для каждого стр из ТЗ Цикл
	Стр.Система = СистемаGUID;
	Стр.UUID = стр.Система+стр.GUID;
	Стр.ДатаЗагрузки = ДатаЗагрузки;		
КонецЦикла;
	 
	
ПараметрыЗаписиВSQL = DT_DWH.ПараметрыЗаписиВSQL();
ПараметрыЗаписиВSQL.ТЗ = ТЗ; 
ПараметрыЗаписиВSQL.ИмяТаблицы = "ФизическиеЛица"; 
ПараметрыЗаписиВSQL.Ключи.Добавить("UUID");
ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("ВерсияДанных");	
//Нач = ТекущаяУниверсальнаяДатаВМиллисекундах();               

СтруктураОтвета = DT_DWH.ЗаписатьТЗВSQL(СоединениеDWH,ПараметрыЗаписиВSQL);
 
//Сообщить("Время: "+(ТекущаяУниверсальнаяДатаВМиллисекундах()-Нач) + " мс"); 
	
Обработано = ТЗ.Количество();
Добавлено = СтруктураОтвета.Добавлено;
Обновлено = СтруктураОтвета.Обновлено;  
	
//-----------------------------------------------------------------  
//Генерация EmployeeID  
//-----------------------------------------------------------------	
//
//	СгенерированоКлючейПФР = 0;
//	Если Добавлено > 0 Тогда
//		RecordSet = СоединениеDWH.Execute("SELECT UUID, СтраховойНомерПФР, Наименование 
//		|FROM ФизическиеЛица as t1
//		|WHERE EmployeeID = \u0027\u0027 or EmployeeID is null");
//		
//		
//		Пока RecordSet.EOF() = Ложь Цикл   
//			ТекUUID = RecordSet.Fields("UUID").Value;
//			ТекСтраховойНомерПФР = RecordSet.Fields("СтраховойНомерПФР").Value; 
//			ТекНаименование = RecordSet.Fields("Наименование").Value;
//			Если ЗначениеЗаполнено(ТекСтраховойНомерПФР) и ТекСтраховойНомерПФР <> "   -   -      " Тогда
//				СтрокаХэширования = ТекСтраховойНомерПФР;
//			ИначеЕсли ЗначениеЗаполнено(ТекНаименование) Тогда	
//				СтрокаХэширования = ТекНаименование
//			Иначе
//				СтрокаХэширования = ТекUUID; //нет даже наименования
//			КонецЕсли; 
//			
//			Хеш = новый ХешированиеДанных(ХешФункция.CRC32);
//			Хеш.Добавить(СтрокаХэширования);
//			EmployeeID = XMLСтрока(Хеш.ХешСумма);
//			
//			СоединениеDWH.Execute("UPDATE t1
//				|SET t1.EmployeeID = "+DT_DWH.ПривестиЗначениеКТекстуSQL(EmployeeID)+"
//				|FROM ФизическиеЛица AS t1
//				|WHERE UUID = "+DT_DWH.ПривестиЗначениеКТекстуSQL(ТекUUID));
//			
//			СгенерированоКлючейПФР = СгенерированоКлючейПФР + 1;
//			
//	
//			RecordSet.MoveNext();	
//		КонецЦикла;
//		
//		
//	КонецЕсли;
		
		
СтрокаОшибок = СтрокаОшибок + ?(СтрокаОшибок="","",Символы.ПС)+ Система +  " Обработано - "+Обработано+". Добавлено - "+Добавлено+". Обновлено - "+Обновлено;
//	". Сгенерировано EmployeeID - "+СгенерированоКлючейПФР;
	
Если не Отладка Тогда
	УстановитьДатуПоследнейЗагрузки(Система,ЗапросСсылка,ДатаЗагрузки);
КонецЕсли;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'СоединениеDWH',
     'Разделитель': null,
     'ЗначениеСтрока': '',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': null,
     'ЗначениеСтрока': 'запрос = Новый запрос;
Запрос.Текст = "ВЫБРАТЬ
               |    ФизическиеЛица.Наименование КАК Наименование,
               |    ФизическиеЛица.Ссылка КАК Ссылка,
               |    ФизическиеЛица.ВерсияДанных КАК ВерсияДанных,
               |    ФизическиеЛица.Код КАК Код,
               |    ФизическиеЛица.ПометкаУдаления КАК ПометкаУдаления,
               |    ФизическиеЛица.ИНН КАК ИНН,
               |    ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
			   |    ФизическиеЛица.EmployeeID КАК EmployeeID,
               |    ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия,
               |    ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
               |    ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество,
               |    ФизическиеЛица.ДатаРождения КАК ДатаРождения,
               |    ЕСТЬNULL(ФизическиеЛица.Пол.Порядок, -1) КАК Пол,
               |    МАКСИМУМ(ЕСТЬNULL(ФизическиеЛицаКонтактнаяИнформация.АдресЭП, """")) КАК Email
               |ИЗ
               |    Справочник.ФизическиеЛица КАК ФизическиеЛица
               |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
               |        ПО (ФИОФизЛицСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка)
               |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
               |        ПО ФизическиеЛица.Ссылка = ФизическиеЛицаКонтактнаяИнформация.Ссылка
               |            И (ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
               |            И (ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица))
               |ГДЕ
               |    НЕ ФизическиеЛица.ЭтоГруппа
               |
               |СГРУППИРОВАТЬ ПО
               |    ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """"),
               |    ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """"),
               |    ФизическиеЛица.Ссылка,
               |    ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """"),
               |    ФизическиеЛица.Наименование,
               |    ФизическиеЛица.ВерсияДанных,
               |    ФизическиеЛица.Код,
               |    ФизическиеЛица.ПометкаУдаления,
               |    ФизическиеЛица.ИНН,
               |    ФизическиеЛица.СтраховойНомерПФР,
			   |    ФизическиеЛица.EmployeeID,
               |    ФизическиеЛица.ДатаРождения,
               |    ЕСТЬNULL(ФизическиеЛица.Пол.Порядок, -1)";
Выборка = Запрос.Выполнить().Выбрать();
                      
ТЗ = новый ТаблицаЗначений;
ТЗ.Колонки.Добавить("UUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(72)));
ТЗ.Колонки.Добавить("Система",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("ДатаЗагрузки",Новый ОписаниеТипов("Дата"));
ТЗ.Колонки.Добавить("ВерсияДанных",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
ТЗ.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("ПометкаУдаления",Новый ОписаниеТипов("Булево"));
ТЗ.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
ТЗ.Колонки.Добавить("ИНН",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("СтраховойНомерПФР",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("EmployeeID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
ТЗ.Колонки.Добавить("Пол",Новый ОписаниеТипов("Число"));
ТЗ.Колонки.Добавить("ДатаРождения",Новый ОписаниеТипов("Дата")); 
ТЗ.Колонки.Добавить("Email",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));

Пока Выборка.Следующий() Цикл
    НовСтр = ТЗ.Добавить(); 
    ЗаполнитьЗначенияСвойств(НовСтр,Выборка);
        
    НовСтр.GUID = XMLСтрока(Выборка.Ссылка);
    НовСтр.Наименование = СокрЛП(Выборка.Наименование);         
КонецЦикла;
result = ЗначениеВСтрокуВнутр(ТЗ);',
     'Комментарий': ''
    }
   ]
  }
 ]
}
