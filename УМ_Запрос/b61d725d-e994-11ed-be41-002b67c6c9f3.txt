{
 'Реквизиты': {
  'Наименование': 'Контроль - обновлений вне релиза',
  'ТекстОбработки': '	//------------------------------------------------------------------------------
	//ПАРАМЕТРЫ                                          
	//------------------------------------------------------------------------------
	Отладка = Ложь;   
	
	ДатаНачалаВыгрузки = ТекущаяДата();
	МаксКоличествоДнейЖРНазад = 60;  
	МаксКолвоСобытий = 1000; //не более 1000 событий
	ТемаСообщения = ""+Система+" - обновление конфигурации вне релиза от "+Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy");  
	
	ПочтаПолучателей = "ssmirnov@t-medica.com"; 
	
	ДопПолучатели = ПолучитьЗначениеПеременной(Переменные,"ПолучателиПоСистеме",Система);
	Если ЗначениеЗаполнено(ДопПолучатели) Тогда  
		ПочтаПолучателей = ПочтаПолучателей + ", "+ДопПолучатели;
	КонецЕсли;
	  
	ГуидУчетнойЗаписиПочты = "567e3146-123f-11ed-a12c-ef295ee2b5a3"; //системная
	 
    Если Отладка Тогда 
    	ПочтаПолучателей = "ssmirnov@t-medica.com";
    КонецЕсли;
	
	СимволПереносаСтроки = Символы.ПС + Символы.ВК;
	ТекстСообщения = "Обновление конфигурации вне релиза. Информация от " + Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy")+" во вложенном файле";

	//произвольные отборы накладываются ниже
	
	 МассивТестовыхПометок = Новый Массив
	 
	
	//------------------------------------------------------------------------------
	//Сбор ЖР
	//------------------------------------------------------------------------------
	ДанныеПоследнейВыгрузки = ПолучитьДанныеПоследнейВыгрузки(Система,ЗапросСсылка.Ссылка);
	ДатаНачала = Макс(ДанныеПоследнейВыгрузки.Дата,НачалоДня(ДатаНачалаВыгрузки)-86400*МаксКоличествоДнейЖРНазад); //не ранее чем за последние X дней 
	
	//------------------------------------------------------------------------------
	//Запрос в базу
	//------------------------------------------------------------------------------ 
	Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы",Система);
	Если Код1СДляИсистемы = Неопределено Тогда 		
		Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы"); //общее
	КонецЕсли;
	  
	ПараметрыHTTPЗапроса = новый структура("ДатаНачала,МаксКолвоСобытий",ДатаНачала,МаксКолвоСобытий);
	СтруктураЗапроса = Новый Структура("value,params",Код1СДляИсистемы,ПараметрыHTTPЗапроса);	
			
	ЗаписьJSON = Новый ЗаписьJSON;ЗаписьJSON.УстановитьСтроку();ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);			
	СтрокаТелаЗапроса = ЗаписьJSON.Закрыть();
		
	HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса+"?DateParamsNames=ДатаНачала");     
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	HTTPОтвет = Соединение.HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
	РезультатРазбораHTTP = Алгоритм("ПрочитатьОтветСервисаUniversal",HTTPОтвет); 
	Если не РезультатРазбораHTTP.Успешно Тогда 
		ВызватьИсключение РезультатРазбораHTTP.Результат;
	КонецЕсли;

	СтруктураРезультатЗапросаHTTP = ЗначениеИзСтрокиВнутр(РезультатРазбораHTTP.Результат);
	ТЗ_ЖР = СтруктураРезультатЗапросаHTTP.ТЗ_ЖР;
 	
 	ТЗ_ЖР.Колонки.Добавить("КоличествоОшибок");
	ТЗ_ЖР.ЗаполнитьЗначения(1,"КоличествоОшибок");
    ТЗ_ЖР.Колонки.Добавить("ДеньНедели");
    МассивУдаляемых = Новый Массив;
    Для Каждого Стр Из ТЗ_ЖР цикл 
    	Если ДеньНедели(Стр.Дата)= 1 Тогда 
    		МассивУдаляемых.Добавить(Стр);
    	КонецЕсли;
    КонецЦикла;
    Для Каждого Стр Из МассивУдаляемых цикл 
      ТЗ_ЖР.Удалить(Стр);
    конеццикла;
 		
	//------------------------------------------------------------------------------
	//СКД
	//------------------------------------------------------------------------------
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные", ТЗ_ЖР);
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";ИсточникДанных.ТипИсточникаДанных = "Local";     
	
	НаборДанныхЗапросСКД = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")); //НаборДанныхЗапросСхемыКомпоновкиДанных
	НаборДанныхЗапросСКД.Имя = "НаборДанных1";
	//НаборДанныхЗапросСКД.Запрос = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
	НаборДанныхЗапросСКД.ИмяОбъекта = "ТЗДанные";
	НаборДанныхЗапросСКД.ИсточникДанных = "ИсточникДанных1";
	//НаборДанныхЗапросСКД.АвтоЗаполнениеДоступныхПолей = Истина; //для запроса
		
	Для каждого КолонкаТЗ Из ТЗ_ЖР.Колонки Цикл //для ТЗ
		НовоеПоле = НаборДанныхЗапросСКД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.ТипЗначения = КолонкаТЗ.ТипЗначения; 
		НовоеПоле.Заголовок = КолонкаТЗ.Заголовок;
		НовоеПоле.ПутьКданным = КолонкаТЗ.Имя;
		НовоеПоле.Поле = КолонкаТЗ.Имя;
		Если КолонкаТЗ.Имя = "Дата" Тогда 
			ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
    		ПолеРесурса.ПутьКДанным = КолонкаТЗ.Имя;
    		ПолеРесурса.Выражение = "МАКСИМУМ("+КолонкаТЗ.Имя+")";
			ПолеРесурса.Группировки.Добавить("Событие");
    	ИначеЕсли КолонкаТЗ.Имя = "КоличествоОшибок" Тогда 
			ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
    		ПолеРесурса.ПутьКДанным = КолонкаТЗ.Имя;
    		ПолеРесурса.Выражение = "КОЛИЧЕСТВО("+КолонкаТЗ.Имя+")";
			ПолеРесурса.Группировки.Добавить("Событие");
    	КонецЕсли; 
 
		//оформление
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("Размещение",ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяВысота",20);
	КонецЦикла;
	
	//Получить инициализированные настройки	
	ИсточникДоступныхНастроекКомпоновкиДанных = новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек = новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
		
	//настройки вывода
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления","Зеленый");  //БиблиотекаМакетовОформленияКомпоновкиДанных.Зеленый
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов",АвтоПозицияРесурсовКомпоновкиДанных.НеИспользовать);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов",РасположениеИтоговКомпоновкиДанных.Нет);
	
	//ВЫБРАННЫЕ ПОЛЯ
	ГруппировкаКД = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));	
	Для каждого КолонкаТЗ Из ТЗ_ЖР.Колонки Цикл
		НовВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);
		Если КолонкаТЗ.Имя <> "Дата" и КолонкаТЗ.Имя <> "КоличествоОшибок" Тогда
			ПолеГруппировки = ГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
			ПолеГруппировки.Использование      = Истина;
			ПолеГруппировки.Поле               = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	
	//сортировка результата
	НовЭлПорядка = ГруппировкаКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовЭлПорядка.Поле = Новый ПолеКомпоновкиДанных("Дата");НовЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
	//------------------------------------------------------------------------------
	//ОТБОРЫ СКД
	//------------------------------------------------------------------------------     
	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеРавно,"{""S"",""""}"); //УХ
		
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"ДеньНедели",ВидСравненияКомпоновкиДанных.НеРавно,1);
	
		
	//------------------------------------------------------------------------------
	//Формирование и отправка отчета по почте
	//------------------------------------------------------------------------------ 
	
	//Вывести отчет в ТД
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновки, , ,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТДРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТДРезультат.ВысотаТаблицы < 2 Тогда
		//нет данных
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - нет данных для отправки"+Символы.ПС;
	Иначе
		//есть данные, отправить в письме 
		
		Вложения = новый Массив;		
		//через поток в памяти
		//ПотокФайла = Новый ПотокВПамяти();
		//ТДРезультат.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.XLSX);
		//ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();	
		//Вложения.Добавить(Новый структура("Представление,АдресВоВременномХранилище",ТемаСообщения+".xlsx",ДвоичныеДанныеФайла)); 
		//ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
		
		//в тело письма HTMLТекстОтчета
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
		ТДРезультат.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.HTML);
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
		HTMLТекстОтчета = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла); 
		ТекстСообщения = ТекстСообщения + Символы.ПС + HTMLТекстОтчета;
		ТипТекста = ТипТекстаПочтовогоСообщения.HTML; 
		
		Алгоритм("ОтправитьEmail",ЗапросСсылка,ПочтаПолучателей,ТемаСообщения,ТекстСообщения,ТипТекста,ГуидУчетнойЗаписиПочты,Вложения);
		
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - сообщения отправлены"+Символы.ПС;
	КонецЕсли;	
	
	Если не Отладка Тогда
		УстановитьДатуПоследнейВыгрузки(Система,ЗапросСсылка,ДатаНачалаВыгрузки);
	КонецЕсли;',
  'Комментарий': 'СКД программно, результат в тело письма или как вложение'
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'ПолучателиПоСистеме',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=00000000000000000000000000000000',
     'ЗначениеСтрока': 'ssmirnov@t-medica.com',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': null,
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);	
МаксКолвоСобытий = params.МаксКолвоСобытий;

//ЖР
ТЗ_ЖР = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала = Новый Структура;
СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
СтруктураОтбораЖурнала.Вставить("Событие","Информационная база. Запуск обновления конфигурации базы данных");
ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

ТЗ_ЖР2 = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала.Вставить("Событие","Данные. Изменение");
СтруктураОтбораЖурнала.Вставить("Метаданные","Справочник. Дополнительные отчеты и обработки");
ВыгрузитьЖурналРегистрации(ТЗ_ЖР2,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
Для Каждого Стр Из ТЗ_ЖР2 Цикл
   ЗаполнитьЗначенияСвойств(ТЗ_ЖР.Добавить(),Стр);
КонецЦикла; 

ТЗ_ЖР3 = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала.Вставить("Событие","Данные. Добавление");
СтруктураОтбораЖурнала.Вставить("Метаданные","Справочник. Дополнительные отчеты и обработки");
ВыгрузитьЖурналРегистрации(ТЗ_ЖР3,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
Для Каждого Стр Из ТЗ_ЖР3 Цикл
   ЗаполнитьЗначенияСвойств(ТЗ_ЖР.Добавить(),Стр);
КонецЦикла; 
 

Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР",ТЗ_ЖР));',
     'Комментарий': 'Общее'
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede342c76fecdd',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);	
МаксКолвоСобытий = params.МаксКолвоСобытий;

//ЖР
ТЗ_ЖР = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала = Новый Структура;
СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
СтруктураОтбораЖурнала.Вставить("Событие","Информационная база. Запуск обновления конфигурации базы данных");
ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

ТЗ_ЖР2 = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала.Вставить("Событие","Данные. Изменение");
СтруктураОтбораЖурнала.Вставить("Метаданные","Справочник. Внешние обработки");
ВыгрузитьЖурналРегистрации(ТЗ_ЖР2,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
Для Каждого Стр Из ТЗ_ЖР2 Цикл
   ЗаполнитьЗначенияСвойств(ТЗ_ЖР.Добавить(),Стр);
КонецЦикла; 

ТЗ_ЖР3 = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала.Вставить("Событие","Данные. Добавление");
СтруктураОтбораЖурнала.Вставить("Метаданные","Справочник. Внешние обработки");
ВыгрузитьЖурналРегистрации(ТЗ_ЖР3,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
Для Каждого Стр Из ТЗ_ЖР3 Цикл
   ЗаполнитьЗначенияСвойств(ТЗ_ЖР.Добавить(),Стр);
КонецЦикла; 
 

Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР",ТЗ_ЖР));',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede40e8bb9e0ed',
     'ЗначениеСтрока': 'ДатаНачала = Дата(params.ДатаНачала);	
МаксКолвоСобытий = params.МаксКолвоСобытий;

//ЖР
ТЗ_ЖР = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала = Новый Структура;
СтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
СтруктураОтбораЖурнала.Вставить("Событие","Информационная база. Запуск обновления конфигурации базы данных");
ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
ВыгрузитьЖурналРегистрации(ТЗ_ЖР,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

ТЗ_ЖР2 = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала.Вставить("Событие","Данные. Изменение");
СтруктураОтбораЖурнала.Вставить("Метаданные","Справочник. Внешние обработки");
ВыгрузитьЖурналРегистрации(ТЗ_ЖР2,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
Для Каждого Стр Из ТЗ_ЖР2 Цикл
   ЗаполнитьЗначенияСвойств(ТЗ_ЖР.Добавить(),Стр);
КонецЦикла; 

ТЗ_ЖР3 = Новый ТаблицаЗначений; 
СтруктураОтбораЖурнала.Вставить("Событие","Данные. Добавление");
СтруктураОтбораЖурнала.Вставить("Метаданные","Справочник. Внешние обработки");
ВыгрузитьЖурналРегистрации(ТЗ_ЖР3,СтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
Для Каждого Стр Из ТЗ_ЖР3 Цикл
   ЗаполнитьЗначенияСвойств(ТЗ_ЖР.Добавить(),Стр);
КонецЦикла; 
 

Result = ЗначениеВСтрокуВнутр(Новый Структура("ТЗ_ЖР",ТЗ_ЖР));',
     'Комментарий': ''
    }
   ]
  }
 ]
}
