{
 'Реквизиты': {
  'Код': '000000020',
  'Наименование': 'Загрузка журнала работ из Jira в DWH',
  'ТекстОбработки': '//-------------------------------------------------------------------- 
//Параметры
//--------------------------------------------------------------------
Отладка= Ложь;

ТЗ = новый ТаблицаЗначений;   
ТЗ.Колонки.Добавить("UUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(72)));
ТЗ.Колонки.Добавить("Система",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("id",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("issueId",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("timeM",Новый ОписаниеТипов("Число",,));
ТЗ.Колонки.Добавить("started",Новый ОписаниеТипов("Дата",,));  
ТЗ.Колонки.Добавить("updated",Новый ОписаниеТипов("Дата",,));
ТЗ.Колонки.Добавить("comment",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1024))); 
ТЗ.Колонки.Добавить("authorId",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("updateAuthorId",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("authorName",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("updateAuthorName",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("IssueNumber",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("IssueSubject",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));  

//-------------------------------------------------------------------- 
//Вычисляемые параметры
//--------------------------------------------------------------------
ДатаПоследнейЗагрузки = ПолучитьДанныеПоследнейЗагрузки(Система,ЗапросСсылка).Дата;
ДатаЗагрузки = ТекущаяДата();
 
СоединениеDWH = ПолучитьЗначениеПеременной(Переменные,"СоединениеDWH");
Если СоединениеDWH = неопределено Тогда
	ВызватьИсключение "Не заполнен параметр СоединениеDWH";
КонецЕсли;
СоединениеDWH = ПолучитьСоединениеПоПодключению(СоединениеDWH,СтрокаОшибок);
Если СоединениеDWH = неопределено Тогда
	ВызватьИсключение "Не выполнено соединение к DWH";
КонецЕсли;

HTTPСоединение = Соединение.HTTPСоединение;
   
СистемаGUID = XMLСтрока(Система);
   


//-------------------------------------------------------------------- 
//Запрос 1 - получение id изменений
//-------------------------------------------------------------------- 
since = Формат(УниверсальноеВремя(ДатаПоследнейЗагрузки) - \u002719700101\u0027, "ЧГ=0"); // unixtime с момента, когда будут возвращены обновленные рабочие журналы.

//Сообщить(since);
 
HTTPЗапрос = Новый HTTPЗапрос("rest/api/2/worklog/updated?since="+xmlСтрока(since)+"000"); //ожидает + 3 знака
HTTPЗапрос.Заголовки = Соединение.Заголовки;


Результат = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
ТекстОтвета = Результат.ПолучитьТелоКакСтроку();

Если СтрНачинаетсяС(ТекстОтвета,"<?xml") Тогда
	Успешно = Ложь; 
	СтрокаОшибок = "Ошибка сервиса: "+ТекстОтвета;
	ВызватьИсключение "";	
КонецЕсли;

 
  
Чтение = Новый ЧтениеJSON;
Чтение.УстановитьСтроку(ТекстОтвета);
СтруктураОтвета = ПрочитатьJSON(Чтение);	
Чтение.Закрыть(); 

//Сообщить("Ответ1 - "ТекстОтвета);
 
СтруктураЗапроса2 = Новый структура("ids",Новый Массив);
Для каждого стр из СтруктураОтвета.Values Цикл 	
	СтруктураЗапроса2.ids.Добавить(стр.worklogId);
КонецЦикла; 

Если СтруктураЗапроса2.ids.Количество() > 0 Тогда

	//-------------------------------------------------------------------- 
	//Запрос 2 - получение данных по id изменений
	//--------------------------------------------------------------------  

	ЗаписьJSON = Новый ЗаписьJSON;	
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса2);			
	СтрокаТелаЗапроса2 = ЗаписьJSON.Закрыть();

	HTTPЗапрос = Новый HTTPЗапрос("rest/api/2/worklog/list");     //лимит 1000 элементов 
	HTTPЗапрос.Заголовки = Соединение.Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса2);
	Результат = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	//Сообщить("Ответ2 - "+ТекстОтвета);

	Если СтрНачинаетсяС(ТекстОтвета,"<?xml") ИЛИ Результат.КодСостояния <> 200 Тогда
		Успешно = Ложь; 
		СтрокаОшибок = "Ошибка сервиса 2: "+ТекстОтвета;
		ВызватьИсключение "";	
	КонецЕсли; 

	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстОтвета);
	СоответствиеОтвета = ПрочитатьJSON(Чтение,Истина,"updated,started");	
	Чтение.Закрыть();
	  
	МассивIdЗадач = Новый массив;  
	Для каждого СтрокаОтвета из СоответствиеОтвета Цикл	
		НовСтр = ТЗ.Добавить(); 
		 
		НовСтр.Система = СистемаGUID;
		НовСтр.id = СтрокаОтвета["id"]; 
		НовСтр.UUID = СистемаGUID + СтрокаОтвета["id"];
		
		НовСтр.issueId = XMLСтрока(СтрокаОтвета["issueId"]);
		НовСтр.timeM = Цел(СтрокаОтвета["timeSpentSeconds"] / 60);
		НовСтр.started = СтрокаОтвета["started"];
		НовСтр.updated = СтрокаОтвета["updated"];
		НовСтр.comment = СтрокаОтвета["comment"];
		НовСтр.authorName = СтрокаОтвета["author"]["displayName"];
		НовСтр.updateAuthorName = СтрокаОтвета["updateAuthor"]["displayName"];  
		НовСтр.authorId = СтрокаОтвета["author"]["accountId"];
		НовСтр.updateAuthorId = СтрокаОтвета["updateAuthor"]["accountId"];
		
		Если МассивIdЗадач.Найти(НовСтр.issueId) = Неопределено Тогда
			МассивIdЗадач.Добавить(НовСтр.issueId);
		КонецЕсли;	
	КонецЦикла; 

	//-------------------------------------------------------------------- 
	//Запрос 3 - получение данных номеров и описания задач
	//--------------------------------------------------------------------  
	//[todo] ограничение порции - 100 элементов!!!! переделать на порционное получение (если total < maxResult, то в цикле с startAt = макс прошлой выборки)
	СтрокаТелаЗапроса3 = "{
	|    ""jql"": ""project = Data-time and  id  in  ("+ СтрСоединить(МассивIdЗадач,",") +")"",
	|    ""startAt"": 0,
	|    ""maxResults"": 1000,
	|    ""fields"": [
	|        ""summary"",
	|        ""key""
	|    ]
	|}";
	  

	HTTPЗапрос = Новый HTTPЗапрос("rest/api/2/search"); 
	HTTPЗапрос.Заголовки = Соединение.Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса3);
	Результат = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	Сообщить("Ответ3 - "+ТекстОтвета);
	Сообщить(СтрокаТелаЗапроса3);

	Если СтрНачинаетсяС(ТекстОтвета,"<?xml") ИЛИ Результат.КодСостояния <> 200 Тогда
		Успешно = Ложь; 
		СтрокаОшибок = "Ошибка сервиса 3: "+ТекстОтвета;
		ВызватьИсключение "";	
	КонецЕсли; 

	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстОтвета);
	СтруктураОтвета3 = ПрочитатьJSON(Чтение);	
	Чтение.Закрыть(); 
	
	Для каждого СтрокаОтвета из СтруктураОтвета3.issues Цикл
		//не быстро, быстрее запросом
		НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("issueId",СтрокаОтвета.id));
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл 
			НайденнаяСтрока.IssueNumber = СтрокаОтвета.key;
			НайденнаяСтрока.IssueSubject = СтрокаОтвета.fields.summary;
		КонецЦикла;		
	КонецЦикла;
	   
	//-------------------------------------------------------------------- 
	//Запись в DWH
	//--------------------------------------------------------------------
	  
	ПараметрыЗаписиВSQL = DT_DWH.ПараметрыЗаписиВSQL();
	ПараметрыЗаписиВSQL.ТЗ = ТЗ; 
	ПараметрыЗаписиВSQL.ИмяТаблицы = "EmployeeWorklog"; 
	ПараметрыЗаписиВSQL.Ключи.Добавить("UUID");
	ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить("updated");
		
	СтруктураОтвета = DT_DWH.ЗаписатьТЗВSQL(СоединениеDWH,ПараметрыЗаписиВSQL);
	   
	Обработано = ТЗ.Количество();
	Добавлено = СтруктураОтвета.Добавлено;
	Обновлено = СтруктураОтвета.Обновлено;  
					
	 
Иначе
	Обработано = 0;
	Добавлено = 0;
	Обновлено = 0;  
КонецЕсли; //количество результатов запроса
 
СтрокаОшибок = СтрокаОшибок + ?(СтрокаОшибок="","",Символы.ПС)+ Система +  " Обработано - "+Обработано+". Добавлено - "+Добавлено+". Обновлено - "+Обновлено;
 
Если Успешно и не Отладка  Тогда
	УстановитьДатуПоследнейЗагрузки(Система,ЗапросСсылка,ДатаЗагрузки);
КонецЕсли;
',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'СоединениеDWH',
     'Разделитель': null,
     'ЗначениеСтрока': '',
     'Комментарий': ''
    }
   ]
  }
 ]
}
