{
 'Реквизиты': {
  'Наименование': 'Интеграция с УПП (заявки)',
  'ТекстОбработки': 'ДанныеПодключений = Новый Структура;
Для каждого ДанныеПеременной Из Переменные Цикл
	Если ДанныеПеременной.Разделитель <> Система Тогда
		Продолжить;	
	КонецЕсли;
	
	ДанныеПодключений.Вставить(ДанныеПеременной.Имя, ДанныеПеременной.Значение);
КонецЦикла;

ТипСобытия_ИнтеграцияУПП_ЗаявкиНаОплату = Справочники.УМ_ТипыСобытий.ПолучитьТипСобытияПоИдентификатору("ИнтеграцияУПП_ЗаявкиНаОплату");

Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	DT_ДО_ВнешниеСистемы.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.DT_ДО_ВнешниеСистемы КАК DT_ДО_ВнешниеСистемы
	|ГДЕ
	|	DT_ДО_ВнешниеСистемы.ВыгружатьЗаявкиНаОплатуГален
	|	И НЕ DT_ДО_ВнешниеСистемы.ПометкаУдаления
	|	И НЕ DT_ДО_ВнешниеСистемы.ЭтотУзел";
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Узел = ВыборкаДетальныеЗаписи.Ссылка;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного);
	
	СообщениеСформировано = Ложь;
	
	Пока ВыборкаИзменений.Следующий() Цикл
	
		РегОбъект = ВыборкаИзменений.Получить();

		Если ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
			
			Документ = РегОбъект.Ссылка;
			НастройкиПоВидуДокумента = DT_ОбщегоНазначениеПовтИсп.ПолучитьНастройкиПоВидуДокумента(Документ.ВидДокумента);
		
			Если НастройкиПоВидуДокумента.ФункционалЗаявокНаОплатуГален Тогда
			
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("UIDMessage", 	Строка(Новый УникальныйИдентификатор));
				СтруктураДанных.Вставить("GUIDDoc", 	Строка(Документ.УникальныйИдентификатор()));
				СтруктураДанных.Вставить("Type", 		"Справочник.ДокументыПредприятия");
				
				МассивДанныхПоРеквизитам = Новый Массив;
				СсылкаНаДопДанные = DT_ОбщегоНазначенияСерверВызовСервера.ПолучитьСсылкуНаДопДанныеДокумента(Документ, "DT_Данные_ЗаявкаНаОплатуГален");	
				Если ЗначениеЗаполнено(СсылкаНаДопДанные) Тогда
					
					ДанныеДокумента = Новый Структура;
					ДанныеДокумента.Вставить("ВидОперации",					Документ.Тематика.GUID_УПП);
					ДанныеДокумента.Вставить("Организация", 				Документ.Организация.GUID_УПП);
					ДанныеДокумента.Вставить("ЦФО", 						Документ.Подразделение.GUID_УПП);
					ДанныеДокумента.Вставить("Ответственный", 				Документ.Ответственный.ПредставлениеВПереписке);
					ДанныеДокумента.Вставить("НазначениеПлатежа", 			Документ.Содержание);
					ДанныеДокумента.Вставить("ВалютаДокумента", 			Документ.Валюта.Код);
					ДанныеДокумента.Вставить("ДатаРасхода", 				Документ.СрокИсполнения);
					ДанныеДокумента.Вставить("Комментарий",					Документ.Комментарий);
					ДанныеДокумента.Вставить("СуммаДокумента",				Документ.Сумма);
					ДанныеДокумента.Вставить("Глн_НомерВоВнешнейСистеме ",	Документ.РегистрационныйНомер);
					ДанныеДокумента.Вставить("Состояние", 					Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ));
					
					ДанныеДокумента.Вставить("СчетОрганизации",				СсылкаНаДопДанные.СчетОрганизацииGUID);
					ДанныеДокумента.Вставить("Контрагент",					СсылкаНаДопДанные.КонтрагентGUID);
					ДанныеДокумента.Вставить("СчетКонтрагента",				СсылкаНаДопДанные.СчетКонтрагентаGUID);
					ДанныеДокумента.Вставить("ВключатьВПлатежныйКалендарь",	СсылкаНаДопДанные.ВключатьВПлатежныйКалендарь);
					ДанныеДокумента.Вставить("НужнаПлатежка",				СсылкаНаДопДанные.НужнаПлатежка);
					ДанныеДокумента.Вставить("ПеречислениеВБюджет",			СсылкаНаДопДанные.ВБюджет);
					ДанныеДокумента.Вставить("КодВыплат",					СсылкаНаДопДанные.УИН);
					ДанныеДокумента.Вставить("ЛицевойСчет",					СсылкаНаДопДанные.ЛицевойСчет);
					ДанныеДокумента.Вставить("КороткийМаршрутСогласования",	СсылкаНаДопДанные.КороткийМаршрутСогласования);
					ДанныеДокумента.Вставить("глн_ЗаявкаНаКомандировку",	СсылкаНаДопДанные.ЗаявкаНаКомандировкуGUID);
					ДанныеДокумента.Вставить("ДокументОснование",			СсылкаНаДопДанные.ДокументОснованиеGUID);
					
					//РасшифровкаПлатежа
					МассивРасшифровкаПлатежа = Новый Массив;
					Для каждого Строка Из СсылкаНаДопДанные.РасшифровкаПлатежа Цикл
						СтруктураДанныхСтроки = Новый Структура;
						СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", 			Строка.ДоговорКонтрагентаGUID);
						СтруктураДанныхСтроки.Вставить("Сделка", 						Строка.СделкаGUID);
						СтруктураДанныхСтроки.Вставить("СуммаПлатежа", 					Строка.СуммаПлатежа);
						СтруктураДанныхСтроки.Вставить("СтатьяДвиженияДенежныхСредств", Строка.СтатьяДДСGUID);
						СтруктураДанныхСтроки.Вставить("Поставка", 						Строка.ПоставкаGUID);
						СтруктураДанныхСтроки.Вставить("СуммаНДС", 						Строка.СуммаНДС);
						СтруктураДанныхСтроки.Вставить("СтавкаНДС", 					XMLстрока(Строка.СтавкаНДС));
						СтруктураДанныхСтроки.Вставить("СчетНомер", 					Строка.СчетНомер);
						СтруктураДанныхСтроки.Вставить("СчетДата", 						Строка.СчетДата);
						//++ SP-13062
						СтруктураДанныхСтроки.Вставить("ЦФО", 							Строка.ЦФО.GUID_УПП);
						СтруктураДанныхСтроки.Вставить("Идентификатор", 				Строка(Строка.Идентификатор));
						//-- SP-13062
						
						МассивРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
					КонецЦикла;
					ДанныеДокумента.Вставить("РасшифровкаПлатежа", МассивРасшифровкаПлатежа);
					
					
					//РазбивкаПоКатегориям
					МассивКатегорий = Новый Массив;
					Для каждого Строка Из СсылкаНаДопДанные.РазбивкаПоКатегориям Цикл
						СтруктураДанныхСтроки = Новый Структура;
						СтруктураДанныхСтроки.Вставить("НоменклатурнаяГруппа", 	Строка.НоменклатурнаяГруппаGUID);
						СтруктураДанныхСтроки.Вставить("ЦФО", 					Строка.ЦФО.GUID_УПП);
						СтруктураДанныхСтроки.Вставить("Процент", 				Строка.Процент);
						//++ SP-13062
						СтруктураДанныхСтроки.Вставить("Идентификатор", 		Строка(Строка.Идентификатор));
						//-- SP-13062
						МассивКатегорий.Добавить(СтруктураДанныхСтроки);
					КонецЦикла;
					ДанныеДокумента.Вставить("РазбивкаПоКатегориям", МассивКатегорий);
					
					
					СтруктураДанных.Вставить("ДанныеДокумента", ДанныеДокумента);
					
				КонецЕсли;
				
				Соединение = Неопределено;
				Если ДанныеПодключений.Свойство("ЗаявкиНаОплатуГален_ДанныеПоДокументу") Тогда
					Соединение = ДанныеПодключений.ЗаявкиНаОплатуГален_ДанныеПоДокументу;
				КонецЕсли;
				Если Соединение <> Неопределено Тогда
					СообщениеСформировано = Истина;
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РегОбъект) = Тип("РегистрСведенийНаборЗаписей.ТекущиеСостоянияДокументов") Тогда
			
			Документ = РегОбъект.Отбор.Документ.Значение;
			
			НастройкиПоВидуДокумента = DT_ОбщегоНазначениеПовтИсп.ПолучитьНастройкиПоВидуДокумента(Документ.ВидДокумента);
		
			Если НастройкиПоВидуДокумента.ФункционалЗаявокНаОплатуГален Тогда
			
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("UIDMessage", 	Строка(Новый УникальныйИдентификатор));
				СтруктураДанных.Вставить("GUIDDoc", 	Строка(Документ.УникальныйИдентификатор()));
				СтруктураДанных.Вставить("Type", 		"РегистрСведений.ТекущиеСостоянияДокументов");
				СтруктураДанных.Вставить("Status",		Строка(РегОбъект.Отбор.Состояние.Значение));
				
				Соединение = Неопределено;
				Если ДанныеПодключений.Свойство("ЗаявкиНаОплатуГален_СтатусДокумента") Тогда
					Соединение = ДанныеПодключений.ЗаявкиНаОплатуГален_СтатусДокумента;
				КонецЕсли;
				Если Соединение <> Неопределено Тогда
					СообщениеСформировано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
			
			Документ = РегОбъект.Владелец.ВладелецФайла;
			
			НастройкиПоВидуДокумента = DT_ОбщегоНазначениеПовтИсп.ПолучитьНастройкиПоВидуДокумента(Документ.ВидДокумента);
		
			Если НастройкиПоВидуДокумента.ФункционалЗаявокНаОплатуГален Тогда
			
				ДвоичныеДанныефайла = РаботаСФайлами.ДвоичныеДанныеФайла(РегОбъект.Ссылка);
				ФайлКакBase64 = Base64Строка(ДвоичныеДанныефайла);
				ФайлКакBase64 = СтрЗаменить(СтрЗаменить(ФайлКакBase64,Символы.ПС,""),Символы.ВК,"");
				
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("UIDMessage", 		Строка(Новый УникальныйИдентификатор));
				СтруктураДанных.Вставить("GUIDDoc", 		Строка(Документ.УникальныйИдентификатор()));
				СтруктураДанных.Вставить("Type", 			"Справочник.Файлы");
				СтруктураДанных.Вставить("GUIDFile", 		Строка(РегОбъект.Владелец.УникальныйИдентификатор()));
				СтруктураДанных.Вставить("namefile", 		РегОбъект.ПолноеНаименование + "." + РегОбъект.Расширение);
				СтруктураДанных.Вставить("file", 			ФайлКакBase64);
				
				Соединение = Неопределено;
				Если ДанныеПодключений.Свойство("ЗаявкиНаОплатуГален_Файлы") Тогда
					Соединение = ДанныеПодключений.ЗаявкиНаОплатуГален_Файлы;
				КонецЕсли;
				Если Соединение <> Неопределено Тогда
					СообщениеСформировано = Истина;
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если СообщениеСформировано Тогда
			НачатьТранзакцию();
			Попытка
				РегистрыСведений.УМ_ОчередьСообщенийКОтправке.ДобавитьСообщение(
					ТипСобытия_ИнтеграцияУПП_ЗаявкиНаОплату,
					Соединение,
					СтруктураДанных,
					СтруктураДанных.UIDMessage);	
				
				//Снимем регистрацию с плана обмена
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, РегОбъект);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ЗаписьЖурналаРегистрации(
					"DT_ИнтеграцияСУПП",
					УровеньЖурналаРегистрации.Ошибка,,,
					"Ошибка при интеграции с УПП(заявки на оплату). Не удалось записать новое сообщение для отправки и снять регистрацию с узла обмена.");
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецЦикла;

Алгоритм("ОтправитьСообщениеВУППпоТипуСобытия",
	ТипСобытия_ИнтеграцияУПП_ЗаявкиНаОплату,
 	"ОтправитьСообщениеВУППпоТипуСобытия",
 	"УПП(заявки на оплату)");',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': []
  }
 ]
}
