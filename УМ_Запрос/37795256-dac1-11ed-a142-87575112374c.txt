{
 'Реквизиты': {
  'Наименование': 'Загрузка Пользователи ИБ 1С DWH',
  'ТекстОбработки': '//-----------------------------------------------------------------
//Параметры выгрузки
//-----------------------------------------------------------------
Отладка = Ложь; 

//-----------------------------------------------------------------  
//Служебные параметры  
//----------------------------------------------------------------- 

ДатаЗагрузки = ТекущаяДата();
СистемаGUID = XMLСтрока(Система);   
ТекстЗапроса = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
СоединениеDWH = ПолучитьЗначениеПеременной(Переменные,"СоединениеDWH");
Если СоединениеDWH = неопределено Тогда
	ВызватьИсключение "Не заполнен параметр СоединениеDWH";
КонецЕсли;
СоединениеDWH = ПолучитьСоединениеПоПодключению(СоединениеDWH,СтрокаОшибок);
Если СоединениеDWH = неопределено Тогда
	ВызватьИсключение "Не выполнено соединение к DWH";
КонецЕсли;
	
//-----------------------------------------------------------------  
//Выполнение  
//----------------------------------------------------------------- 

//------------------------------------------------------------------------------
//Запрос в базу
//------------------------------------------------------------------------------ 
Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы",Система);
Если Код1СДляИсистемы = Неопределено Тогда 		
	Код1СДляИсистемы = ПолучитьЗначениеПеременной(Переменные,"Код1СДляСистемы"); //общее
КонецЕсли;
	  
ПараметрыHTTPЗапроса = новый структура("ДатаЗагрузки",ДатаЗагрузки);
СтруктураЗапроса = Новый Структура("value,params",Код1СДляИсистемы,ПараметрыHTTPЗапроса);	
		
ЗаписьJSON = Новый ЗаписьJSON;ЗаписьJSON.УстановитьСтроку();ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);			
СтрокаТелаЗапроса = ЗаписьJSON.Закрыть();
	
HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса+"?DateParamsNames=ДатаЗагрузки");     
HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
HTTPОтвет = Соединение.HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос); 
РезультатРазбораHTTP = Алгоритм("ПрочитатьОтветСервисаUniversal",HTTPОтвет); 
Если не РезультатРазбораHTTP.Успешно Тогда 
	ВызватьИсключение РезультатРазбораHTTP.Результат;
КонецЕсли;

ТЗ = ЗначениеИзСтрокиВнутр(РезультатРазбораHTTP.Результат);


//Дополнить данные
Для каждого стр из ТЗ Цикл
	Стр.Система = СистемаGUID;
	Стр.UUID = стр.Система+стр.GUID;
	Стр.ДатаЗагрузки = ДатаЗагрузки;
	 
КонецЦикла;
	 
	
ПараметрыЗаписиВSQL = DT_DWH.ПараметрыЗаписиВSQL();
ПараметрыЗаписиВSQL.ТЗ = ТЗ; 
ПараметрыЗаписиВSQL.ИмяТаблицы = "ПользователиИБ1С"; 
ПараметрыЗаписиВSQL.Ключи.Добавить("UUID");
//Сравнивать - все колонки, кроме даты загрузки
Для каждого Кол из ТЗ.Колонки Цикл
	Если Кол.Имя = "UUID" ИЛИ Кол.Имя = "ДатаЗагрузки" Тогда Продолжить; КонецЕсли;
	ПараметрыЗаписиВSQL.СвойстваДляСравнения.Добавить(Кол.Имя);
КонецЦикла;

	
СтруктураОтвета = DT_DWH.ЗаписатьТЗВSQL(СоединениеDWH,ПараметрыЗаписиВSQL);
 
	
Обработано = ТЗ.Количество();
Добавлено = СтруктураОтвета.Добавлено;
Обновлено = СтруктураОтвета.Обновлено;  
		
		
СтрокаОшибок = СтрокаОшибок + ?(СтрокаОшибок="","",Символы.ПС)+ Система +  " Обработано - "+Обработано+". Добавлено - "+Добавлено+". Обновлено - "+Обновлено;
	
Если не Отладка Тогда
	УстановитьДатуПоследнейЗагрузки(Система,ЗапросСсылка,ДатаЗагрузки);
КонецЕсли;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'СоединениеDWH',
     'Разделитель': null,
     'ЗначениеСтрока': '',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': null,
     'ЗначениеСтрока': 'Result = ""; 

ТЗ = новый ТаблицаЗначений;
ТЗ.Колонки.Добавить("UUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(72)));
ТЗ.Колонки.Добавить("Система",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("ДатаЗагрузки",Новый ОписаниеТипов("Дата"));

ТЗ.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
ТЗ.Колонки.Добавить("ПолноеИмя",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
ТЗ.Колонки.Добавить("АдресЭлектроннойПочты",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("АутентификацияOpenID",Новый ОписаниеТипов("Булево"));
ТЗ.Колонки.Добавить("АутентификацияОС",Новый ОписаниеТипов("Булево")); 
ТЗ.Колонки.Добавить("ПользовательОС",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
ТЗ.Колонки.Добавить("АутентификацияСтандартная",Новый ОписаниеТипов("Булево"));  
ТЗ.Колонки.Добавить("ПарольУстановлен",Новый ОписаниеТипов("Булево")); 
ТЗ.Колонки.Добавить("СохраняемоеЗначениеПароля",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)));
ТЗ.Колонки.Добавить("ПоказыватьВСпискеВыбора",Новый ОписаниеТипов("Булево"));
ТЗ.Колонки.Добавить("ПредупреждатьОбОпасныхДействиях",Новый ОписаниеТипов("Булево"));

ТЗ.Колонки.Добавить("ИмеетПравоНаВход",Новый ОписаниеТипов("Булево"));
  
ВсеПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей(); 
Для каждого ПользовательИБ из ВсеПользователиИБ Цикл 
	НовСтрТЗ = ТЗ.Добавить();
	
	НовСтрТЗ.GUID = XMLСтрока(ПользовательИБ.УникальныйИдентификатор);	
	НовСтрТЗ.Имя = ПользовательИБ.Имя;
	НовСтрТЗ.ПолноеИмя = ПользовательИБ.ПолноеИмя;  	
	НовСтрТЗ.АдресЭлектроннойПочты = ПользовательИБ.АдресЭлектроннойПочты; 
	НовСтрТЗ.АутентификацияOpenID = ПользовательИБ.АутентификацияOpenID;
	НовСтрТЗ.АутентификацияОС = ПользовательИБ.АутентификацияОС;
	НовСтрТЗ.ПользовательОС = ПользовательИБ.ПользовательОС;
	
	НовСтрТЗ.АутентификацияСтандартная = ПользовательИБ.АутентификацияСтандартная;
	НовСтрТЗ.ПарольУстановлен = ПользовательИБ.ПарольУстановлен;
	НовСтрТЗ.СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля;
	НовСтрТЗ.ПоказыватьВСпискеВыбора = ПользовательИБ.ПоказыватьВСпискеВыбора;
		
	НовСтрТЗ.ПредупреждатьОбОпасныхДействиях = ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
	НовСтрТЗ.ИмеетПравоНаВход = НовСтрТЗ.АутентификацияОС ИЛИ НовСтрТЗ.АутентификацияСтандартная ИЛИ НовСтрТЗ.АутентификацияOpenID;
		
  
КонецЦикла;  

result = ЗначениеВСтрокуВнутр(ТЗ);

',
     'Комментарий': ''
    },
    {
     'Имя': 'Код1СДляСистемы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14587575112374c11edefe38874ea52',
     'ЗначениеСтрока': 'Result = ""; 

ТЗ = новый ТаблицаЗначений;
ТЗ.Колонки.Добавить("UUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(72)));
ТЗ.Колонки.Добавить("Система",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("GUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
ТЗ.Колонки.Добавить("ДатаЗагрузки",Новый ОписаниеТипов("Дата"));

ТЗ.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
ТЗ.Колонки.Добавить("ПолноеИмя",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
ТЗ.Колонки.Добавить("АдресЭлектроннойПочты",новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
ТЗ.Колонки.Добавить("АутентификацияOpenID",Новый ОписаниеТипов("Булево"));
ТЗ.Колонки.Добавить("АутентификацияОС",Новый ОписаниеТипов("Булево")); 
ТЗ.Колонки.Добавить("ПользовательОС",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
ТЗ.Колонки.Добавить("АутентификацияСтандартная",Новый ОписаниеТипов("Булево"));  
ТЗ.Колонки.Добавить("ПарольУстановлен",Новый ОписаниеТипов("Булево")); 
ТЗ.Колонки.Добавить("СохраняемоеЗначениеПароля",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)));
ТЗ.Колонки.Добавить("ПоказыватьВСпискеВыбора",Новый ОписаниеТипов("Булево"));
ТЗ.Колонки.Добавить("ПредупреждатьОбОпасныхДействиях",Новый ОписаниеТипов("Булево"));

ТЗ.Колонки.Добавить("ИмеетПравоНаВход",Новый ОписаниеТипов("Булево"));

СоответветствиеEmail = Новый Соответствие();
Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка.ИдентификаторПользователяИБ,
	|	МАКСИМУМ(ПользователиКонтактнаяИнформация.АдресЭП) КАК АдресЭП
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ПользователиКонтактнаяИнформация.Ссылка.ИдентификаторПользователяИБ";

РезультатЗапроса = Запрос.Выполнить();	
Выборка = РезультатЗапроса.Выбрать();
Пока Выборка.Следующий() Цикл
	СоответветствиеEmail.Вставить(Выборка.ИдентификаторПользователяИБ,Выборка.АдресЭП);
КонецЦикла;
  
ВсеПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей(); 
Для каждого ПользовательИБ из ВсеПользователиИБ Цикл 
    НовСтрТЗ = ТЗ.Добавить();
    
    НовСтрТЗ.GUID = XMLСтрока(ПользовательИБ.УникальныйИдентификатор);  
    НовСтрТЗ.Имя = ПользовательИБ.Имя;
    НовСтрТЗ.ПолноеИмя = ПользовательИБ.ПолноеИмя;
    
	Email = СоответветствиеEmail.Получить(ПользовательИБ.УникальныйИдентификатор);
	Если ЗначениеЗаполнено(Email) Тогда
		НовСтрТЗ.АдресЭлектроннойПочты = Email;
	КонецЕсли;
    
    НовСтрТЗ.АутентификацияOpenID = ПользовательИБ.АутентификацияOpenID;
    НовСтрТЗ.АутентификацияОС = ПользовательИБ.АутентификацияОС;
    НовСтрТЗ.ПользовательОС = ПользовательИБ.ПользовательОС;
    
    НовСтрТЗ.АутентификацияСтандартная = ПользовательИБ.АутентификацияСтандартная;
    НовСтрТЗ.ПарольУстановлен = ПользовательИБ.ПарольУстановлен;
    НовСтрТЗ.СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля;
    НовСтрТЗ.ПоказыватьВСпискеВыбора = ПользовательИБ.ПоказыватьВСпискеВыбора;
        
    НовСтрТЗ.ПредупреждатьОбОпасныхДействиях = ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
    НовСтрТЗ.ИмеетПравоНаВход = НовСтрТЗ.АутентификацияОС ИЛИ НовСтрТЗ.АутентификацияСтандартная ИЛИ НовСтрТЗ.АутентификацияOpenID;
        
  
КонецЦикла;  

result = ЗначениеВСтрокуВнутр(ТЗ);',
     'Комментарий': ''
    }
   ]
  }
 ]
}
