{
 'Реквизиты': {
  'Код': '000000038',
  'Наименование': 'Интеграция с УПП (заявки)',
  'ТекстОбработки': 'ЕстьОшибкиВыполнения = Ложь;

Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	DT_ДО_ВнешниеСистемы.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.DT_ДО_ВнешниеСистемы КАК DT_ДО_ВнешниеСистемы
	|ГДЕ
	|	DT_ДО_ВнешниеСистемы.ВыгружатьЗаявкиНаОплату
	|	И НЕ DT_ДО_ВнешниеСистемы.ПометкаУдаления
	|	И НЕ DT_ДО_ВнешниеСистемы.ЭтотУзел";
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Узел = ВыборкаДетальныеЗаписи.Ссылка;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного);
	
	Пока ВыборкаИзменений.Следующий() Цикл
	
		РегОбъект = ВыборкаИзменений.Получить();

		Если ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
			
			Документ = РегОбъект.Ссылка;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("UIDMessage", 	Строка(Новый УникальныйИдентификатор));
			СтруктураДанных.Вставить("GUIDDoc", 	Строка(Документ.УникальныйИдентификатор()));
			
			МассивДанныхПоРеквизитам = Новый Массив;
			СсылкаНаДопДанные = DT_ОбщегоНазначенияСерверВызовСервера.ПолучитьСсылкуНаДопДанныеДокумента(Документ, "DT_Данные_ЗаявкаНаОплатуГален");	
			Если ЗначениеЗаполнено(СсылкаНаДопДанные) Тогда
				
				ДанныеДокумента = Новый Структура;
				ДанныеДокумента.Вставить("ВидОперации",					Документ.Тематика.GUID_УПП);
				ДанныеДокумента.Вставить("Организация", 				Документ.Организация.GUID_УПП);
				ДанныеДокумента.Вставить("ЦФО", 						Документ.Подразделение.GUID_УПП);
				ДанныеДокумента.Вставить("Ответственный", 				Документ.Ответственный.ПредставлениеВПереписке);
				ДанныеДокумента.Вставить("НазначениеПлатежа", 			Документ.Содержание);
				ДанныеДокумента.Вставить("ВалютаДокумента", 			Документ.Валюта.Код);
				ДанныеДокумента.Вставить("ДатаРасхода", 				Документ.СрокИсполнения);
				ДанныеДокумента.Вставить("Комментарий",					Документ.Комментарий);
				ДанныеДокумента.Вставить("СуммаДокумента",				Документ.Сумма);
				ДанныеДокумента.Вставить("Глн_НомерВоВнешнейСистеме ",	Документ.РегистрационныйНомер);
				ДанныеДокумента.Вставить("Состояние", 					Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ));
				
				ДанныеДокумента.Вставить("СчетОрганизации",				СсылкаНаДопДанные.СчетОрганизацииGUID);
				ДанныеДокумента.Вставить("Контрагент",					СсылкаНаДопДанные.КонтрагентGUID);
				ДанныеДокумента.Вставить("СчетКонтрагента",				СсылкаНаДопДанные.СчетКонтрагентаGUID);
				ДанныеДокумента.Вставить("ВключатьВПлатежныйКалендарь",	СсылкаНаДопДанные.ВключатьВПлатежныйКалендарь);
				ДанныеДокумента.Вставить("НужнаПлатежка",				СсылкаНаДопДанные.НужнаПлатежка);
				ДанныеДокумента.Вставить("ПеречислениеВБюджет",			СсылкаНаДопДанные.ВБюджет);
				ДанныеДокумента.Вставить("КодВыплат",					СсылкаНаДопДанные.УИН);
				ДанныеДокумента.Вставить("ЛицевойСчет",					СсылкаНаДопДанные.ЛицевойСчет);
				ДанныеДокумента.Вставить("КороткийМаршрутСогласования",	СсылкаНаДопДанные.КороткийМаршрутСогласования);
				
				//РасшифровкаПлатежа
				МассивРасшифровкаПлатежа = Новый Массив;
				Для каждого Строка Из СсылкаНаДопДанные.РасшифровкаПлатежа Цикл
					СтруктураДанныхСтроки = Новый Структура;
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", 			Строка.ДоговорКонтрагентаGUID);
					СтруктураДанныхСтроки.Вставить("Сделка", 						Строка.СделкаGUID);
					СтруктураДанныхСтроки.Вставить("СуммаПлатежа", 					Строка.СуммаПлатежа);
					СтруктураДанныхСтроки.Вставить("СтатьяДвиженияДенежныхСредств", Строка.СтатьяДДСGUID);
					СтруктураДанныхСтроки.Вставить("Поставка", 						Строка.ПоставкаGUID);
					СтруктураДанныхСтроки.Вставить("СуммаНДС", 						Строка.СуммаНДС);
					СтруктураДанныхСтроки.Вставить("СтавкаНДС", 					XMLстрока(Строка.СтавкаНДС));
					СтруктураДанныхСтроки.Вставить("СчетНомер", 					Строка.СчетНомер);
					СтруктураДанныхСтроки.Вставить("СчетДата", 						Строка.СчетДата);
					
					МассивРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
				КонецЦикла;
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();  
				ЗаписатьJSON(ЗаписьJSON, МассивРасшифровкаПлатежа);            
				ДанныеJSON = ЗаписьJSON.Закрыть();
				ДанныеДокумента.Вставить("РасшифровкаПлатежа",ДанныеJSON);
				
				
				//РазбивкаПоКатегориям
				МассивКатегорий = Новый Массив;
				Для каждого Строка Из СсылкаНаДопДанные.РазбивкаПоКатегориям Цикл
					СтруктураДанныхСтроки = Новый Структура;
					СтруктураДанныхСтроки.Вставить("НоменклатурнаяГруппа", 	Строка.НоменклатурнаяГруппаGUID);
					СтруктураДанныхСтроки.Вставить("ЦФО", 					Строка.ЦФО.GUID_УПП);
					СтруктураДанныхСтроки.Вставить("Процент", 				Строка.Процент);
					МассивКатегорий.Добавить(СтруктураДанныхСтроки);
				КонецЦикла;
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();  
				ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);            
				ДанныеJSON = ЗаписьJSON.Закрыть();
				ДанныеДокумента.Вставить("РазбивкаПоКатегориям",ДанныеJSON);
				
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();  
				ЗаписатьJSON(ЗаписьJSON, ДанныеДокумента);            
				ДанныеJSON = ЗаписьJSON.Закрыть();
				СтруктураДанных.Вставить("DataDocument", ДанныеJSON);
				
			КонецЕсли;
			
			Соединение = ПолучитьЗначениеПеременной(Переменные,"ЗаявкиНаОплатуГален_ДанныеПоДокументу");
			Если Соединение = неопределено Тогда
				ЕстьОшибкиВыполнения = Истина;
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РегОбъект) = Тип("РегистрСведенийНаборЗаписей.ТекущиеСостоянияДокументов") Тогда
			
			Документ = РегОбъект.Отбор.Документ.Значение;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("UIDMessage", 	Строка(Новый УникальныйИдентификатор));
			СтруктураДанных.Вставить("GUIDDoc", 	Строка(Документ.УникальныйИдентификатор()));
			СтруктураДанных.Вставить("Status",		Строка(РегОбъект.Отбор.Состояние.Значение));
			
			Соединение = ПолучитьЗначениеПеременной(Переменные,"ЗаявкиНаОплатуГален_СтатусДокумента");
			Если Соединение = неопределено Тогда
				ЕстьОшибкиВыполнения = Истина;
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
			
			ДвоичныеДанныефайла = РаботаСФайлами.ДвоичныеДанныеФайла(РегОбъект.Ссылка);
			ФайлКакBase64 = Base64Строка(ДвоичныеДанныефайла);
			ФайлКакBase64 = СтрЗаменить(СтрЗаменить(ФайлКакBase64,Символы.ПС,""),Символы.ВК,"");
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("UIDMessage", 		Строка(Новый УникальныйИдентификатор));
			СтруктураДанных.Вставить("GUIDDoc", 		Строка(РегОбъект.Владелец.ВладелецФайла.УникальныйИдентификатор()));
			СтруктураДанных.Вставить("GUIDFile", 		Строка(РегОбъект.Владелец.УникальныйИдентификатор()));
			СтруктураДанных.Вставить("namefile", 		РегОбъект.ПолноеНаименование + "." + РегОбъект.Расширение);
			СтруктураДанных.Вставить("file", 			ФайлКакBase64);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();  
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);            
			ДанныеJSON = ЗаписьJSON.Закрыть();
			
			Соединение = ПолучитьЗначениеПеременной(Переменные,"ЗаявкиНаОплатуГален_Файлы");
			Если Соединение = неопределено Тогда
				ЕстьОшибкиВыполнения = Истина;
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ЕстьОшибкиВыполнения = Истина;
			Продолжить;
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();  
		ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);            
		ДанныеJSON = ЗаписьJSON.Закрыть();
		
		СтруктураОтправки = Новый Структура;
		СтруктураОтправки.Вставить("Соединение", Соединение);
		СтруктураОтправки.Вставить("ДанныеJSON", ДанныеJSON);
		            
		РегистрыСведений.УМ_ОчередьСообщенийКОтправке.ДобавитьСообщение(
			Перечисления.УМ_ТипыСобытийКОтправке.ПустаяСсылка(),
			ЗапросСсылка.Ссылка,
			СтруктураОтправки,
			СтруктураДанных.UIDMessage);   
			
	КонецЦикла; 
	
	Если НЕ ЕстьОшибкиВыполнения Тогда
		МассивОбъектовДляОтменыРегистрации = Новый Массив;
		ВыборкаИзменений.Сбросить();
		Пока ВыборкаИзменений.Следующий() Цикл
			РегОбъект = ВыборкаИзменений.Получить();
			
			Если ТипЗнч(РегОбъект) = Тип("РегистрСведенийНаборЗаписей.ТекущиеСостоянияДокументов") Тогда
				МассивОбъектовДляОтменыРегистрации.Добавить(РегОбъект);
				
			ИначеЕсли ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
				МассивОбъектовДляОтменыРегистрации.Добавить(РегОбъект.Ссылка);     
				
			ИначеЕсли ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
				МассивОбъектовДляОтменыРегистрации.Добавить(РегОбъект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;

		Если ЗначениеЗаполнено(МассивОбъектовДляОтменыРегистрации) Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, МассивОбъектовДляОтменыРегистрации);
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеСервисаИСообщений = Новый Соответствие;
	ТЗ_КОтправке = УМ_ВнешниеПодключения.ПолучитьТЗДанныхОчередиКОтправкеПоЗапросу(ЗапросСсылка.Ссылка);
	
	Для каждого ДанныеДляОтправки Из ТЗ_КОтправке Цикл
                    
		ДанныеСтр = ДанныеДляОтправки.Данные.Получить();
		
		СтруктураДляОтправки = СоответствиеСервисаИСообщений.Получить(ДанныеСтр.Соединение);
		Если СтруктураДляОтправки = Неопределено Тогда
			СтруктураДляОтправки = Новый Структура;
			СтруктураДляОтправки.Вставить("МассивСообщений", Новый Массив);
			СтруктураДляОтправки.Вставить("МассивУИДовСообщений", Новый Массив);
		КонецЕсли;

		СтруктураДляОтправки.МассивСообщений.Добавить(ДанныеСтр.ДанныеJSON);
		СтруктураДляОтправки.МассивУИДовСообщений.Добавить(ДанныеДляОтправки.Идентификатор);
		
		СоответствиеСервисаИСообщений.Вставить(ДанныеСтр.Соединение, СтруктураДляОтправки);
		
	КонецЦикла;
	
	Для каждого ДанныеДляОтправки Из СоответствиеСервисаИСообщений Цикл
                   
		Соединение = ПолучитьСоединениеПоПодключению(ДанныеДляОтправки.Ключ);
		Если Соединение = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();  
		ЗаписатьJSON(ЗаписьJSON, ДанныеДляОтправки.Значение.МассивСообщений);            
		СообщениеВУПП = ЗаписьJSON.Закрыть();

		HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса);
		HTTPЗапрос.УстановитьТелоИзСтроки(СообщениеВУПП);

		ДанныеОтвета = Неопределено;
		Попытка
			ДатаВремяНачалаПопыткиОтправки = ТекущаяДата();
			Ответ = Соединение.HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			Если Ответ.КодСостояния = 200 Тогда
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());  
				ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);            
				ЧтениеJSON.Закрыть();
			Иначе
				
				Для каждого УИДСообщения Из ДанныеДляОтправки.Значение.МассивУИДовСообщений Цикл
				
					Менеджер = РегистрыСведений.УМ_ОчередьСообщенийКОтправке.СоздатьМенеджерЗаписи();		
					Менеджер.Идентификатор = УИДСообщения;
					Менеджер.Прочитать();
					Если Менеджер.Выбран() Тогда
						Менеджер.СообщениеОтправлено = Ложь; 	
						Менеджер.ДатаВремяНачалаПопыткиОтправки = ДатаВремяНачалаПопыткиОтправки; 
						Менеджер.ДатаВремяОкончанияПопыткиОтправки = ТекущаяДата();
						Менеджер.КоличествоПопытокОтправки = Менеджер.КоличествоПопытокОтправки+1;
						Если Менеджер.КоличествоПопытокОтправки > 2 Тогда   
							//Запишем в журнал что отправка заблокирована
							ТекстКомментария = "Превышено максимальное число попыток сообщения с идентификатором \u0027"+УИДСообщения+"\u0027 , отправка заблокирована";
							УМ_ВнешниеПодключения.СделатьЗаписьОтправкиВЖурналеРегистрации("ОтправкаЗаблокированаПоЧислуПопыток", УровеньЖурналаРегистрации.Предупреждение, ТекстКомментария);
							Менеджер.ОтправкаЗаблокирована = Истина; 
						КонецЕсли;    		
						Менеджер.Записать(Истина);
					КонецЕсли;
				
				КонецЦикла;
				
				ЗаписьЖурналаРегистрации(
					"DT_ИнтеграцияСДокументооборотом",
					УровеньЖурналаРегистрации.Ошибка,,,
					"Ошибка при интеграции с УПП. Код состояния: " + Ответ.КодСостояния + Символы.ПС + Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
		Исключение
			
			Для каждого УИДСообщения Из ДанныеДляОтправки.Значение.МассивУИДовСообщений Цикл
				
				Менеджер = РегистрыСведений.УМ_ОчередьСообщенийКОтправке.СоздатьМенеджерЗаписи();		
				Менеджер.Идентификатор = УИДСообщения;
				Менеджер.Прочитать();
				Если Менеджер.Выбран() Тогда
					Менеджер.СообщениеОтправлено = Ложь; 	
					Менеджер.ДатаВремяНачалаПопыткиОтправки = ДатаВремяНачалаПопыткиОтправки; 
					Менеджер.ДатаВремяОкончанияПопыткиОтправки = ТекущаяДата();
					Менеджер.КоличествоПопытокОтправки = Менеджер.КоличествоПопытокОтправки+1;
					Если Менеджер.КоличествоПопытокОтправки > 2 Тогда   
						//Запишем в журнал что отправка заблокирована
						ТекстКомментария = "Превышено максимальное число попыток сообщения с идентификатором \u0027"+УИДСообщения+"\u0027 , отправка заблокирована";
						УМ_ВнешниеПодключения.СделатьЗаписьОтправкиВЖурналеРегистрации("ОтправкаЗаблокированаПоЧислуПопыток", УровеньЖурналаРегистрации.Предупреждение, ТекстКомментария);
						Менеджер.ОтправкаЗаблокирована = Истина; 
					КонецЕсли;    		
					Менеджер.Записать(Истина);
				КонецЕсли; 
			
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				"DT_ИнтеграцияСДокументооборотом",
				УровеньЖурналаРегистрации.Ошибка,,,
				ОписаниеОшибки());
		КонецПопытки;
		
		Если ДанныеОтвета <> Неопределено Тогда
			
			Для каждого ДанныеСообщения Из ДанныеОтвета.New Цикл
				
				ОбъектДО = DT_ОбщегоНазначенияСерверВызовСервера.НайтиСсылкуПоУИД(ДанныеСообщения.GUID_DO);
				Если ОбъектДО = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				DT_ОбщегоНазначенияСерверВызовСервера.ЗаписатьСоответствиеОбъектовДОиВнешнейСистемы(
					ОбъектДО,
					ДанныеСообщения.GUID_UPP,
					ПланыОбмена.DT_ДО_ВнешниеСистемы.НайтиПоКоду(ДанныеСообщения.IDNode));
			
			КонецЦикла;
			
			Для каждого УИДСообщения Из ДанныеОтвета.Good Цикл
				
				Менеджер = РегистрыСведений.УМ_ОчередьСообщенийКОтправке.СоздатьМенеджерЗаписи();		
				Менеджер.Идентификатор = УИДСообщения;
				Менеджер.Прочитать();
				Если Менеджер.Выбран() Тогда
					Менеджер.СообщениеОтправлено = Истина; 	
					Менеджер.ДатаВремяНачалаПопыткиОтправки = ДатаВремяНачалаПопыткиОтправки; 
					Менеджер.ДатаВремяОкончанияПопыткиОтправки = ТекущаяДата();
					Менеджер.Записать(Истина);
				КонецЕсли; 
			
			КонецЦикла;
			
			Для каждого УИДСообщения Из ДанныеОтвета.Error Цикл
				
				Менеджер = РегистрыСведений.УМ_ОчередьСообщенийКОтправке.СоздатьМенеджерЗаписи();		
				Менеджер.Идентификатор = УИДСообщения;
				Менеджер.Прочитать();
				Если Менеджер.Выбран() Тогда
					Менеджер.СообщениеОтправлено = Ложь; 	
					Менеджер.ДатаВремяНачалаПопыткиОтправки = ДатаВремяНачалаПопыткиОтправки; 
					Менеджер.ДатаВремяОкончанияПопыткиОтправки = ТекущаяДата();
					Менеджер.КоличествоПопытокОтправки = Менеджер.КоличествоПопытокОтправки+1;
					Если Менеджер.КоличествоПопытокОтправки > 2 Тогда   
						//Запишем в журнал что отправка заблокирована
						ТекстКомментария = "Превышено максимальное число попыток сообщения с идентификатором \u0027"+УИДСообщения+"\u0027 , отправка заблокирована";
						УМ_ВнешниеПодключения.СделатьЗаписьОтправкиВЖурналеРегистрации("ОтправкаЗаблокированаПоЧислуПопыток", УровеньЖурналаРегистрации.Предупреждение, ТекстКомментария);
						Менеджер.ОтправкаЗаблокирована = Истина; 
					КонецЕсли;    		
					Менеджер.Записать(Истина);
				КонецЕсли; 
			
			КонецЦикла;
		
		КонецЕсли;
		
		УзелОбъект = Узел.ПолучитьОбъект();
		УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;
		УзелОбъект.Записать();

	КонецЦикла;
	      
КонецЦикла;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'ЗаявкиНаОплатуГален_ДанныеПоДокументу',
     'Разделитель': null,
     'ЗначениеСтрока': '',
     'Комментарий': ''
    },
    {
     'Имя': 'ЗаявкиНаОплатуГален_СтатусДокумента',
     'Разделитель': null,
     'ЗначениеСтрока': '',
     'Комментарий': ''
    },
    {
     'Имя': 'ЗаявкиНаОплатуГален_Файлы',
     'Разделитель': null,
     'ЗначениеСтрока': '',
     'Комментарий': ''
    }
   ]
  }
 ]
}
