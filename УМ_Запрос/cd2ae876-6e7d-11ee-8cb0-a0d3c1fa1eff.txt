{
 'Реквизиты': {
  'Код': '000000038',
  'Наименование': 'Интеграция с УПП (заявки)',
  'ТекстОбработки': 'ДанныеПодключений = Новый Структура;
Для каждого ДанныеПеременной Из Переменные Цикл
	Если ДанныеПеременной.Разделитель <> Система Тогда
		Продолжить;	
	КонецЕсли;
	
	ДанныеПодключений.Вставить(ДанныеПеременной.Имя, ДанныеПеременной.Значение);
КонецЦикла;

ТипСобытия_ИнтеграцияУПП_ЗаявкиНаОплату = ПолучитьЗначениеПеременной(Переменные, "ИнтеграцияУПП_ЗаявкиНаОплату", Система);

IDNode = "";
Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	DT_ДО_ВнешниеСистемы.Код КАК Код
	|ИЗ
	|	ПланОбмена.DT_ДО_ВнешниеСистемы КАК DT_ДО_ВнешниеСистемы
	|ГДЕ
	|	DT_ДО_ВнешниеСистемы.ЭтотУзел
	|	И НЕ DT_ДО_ВнешниеСистемы.ПометкаУдаления";
РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать();
Пока Выборка.Следующий() Цикл
	IDNode = Выборка.Код;
КонецЦикла;

Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	DT_ДО_ВнешниеСистемы.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.DT_ДО_ВнешниеСистемы КАК DT_ДО_ВнешниеСистемы
	|ГДЕ
	|	DT_ДО_ВнешниеСистемы.ВыгружатьЗаявкиНаОплату
	|	И НЕ DT_ДО_ВнешниеСистемы.ПометкаУдаления
	|	И НЕ DT_ДО_ВнешниеСистемы.ЭтотУзел";
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Узел = ВыборкаДетальныеЗаписи.Ссылка;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного);
	
	Пока ВыборкаИзменений.Следующий() Цикл
	
		РегОбъект = ВыборкаИзменений.Получить();

		Если ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
			
			Документ = РегОбъект.Ссылка;
			НастройкиПоВидуДокумента = DT_ОбщегоНазначениеПовтИсп.ПолучитьНастройкиПоВидуДокумента(Документ.ВидДокумента);
		
			Если НастройкиПоВидуДокумента.ФункционалЗаявокНаОплатуГален Тогда
			
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("UIDMessage", 	Строка(Новый УникальныйИдентификатор));
				СтруктураДанных.Вставить("GUIDDoc", 	Строка(Документ.УникальныйИдентификатор()));
				СтруктураДанных.Вставить("Type", 		"Справочник.ДокументыПредприятия");
				
				МассивДанныхПоРеквизитам = Новый Массив;
				СсылкаНаДопДанные = DT_ОбщегоНазначенияСерверВызовСервера.ПолучитьСсылкуНаДопДанныеДокумента(Документ, "DT_Данные_ЗаявкаНаОплатуГален");	
				Если ЗначениеЗаполнено(СсылкаНаДопДанные) Тогда
					
					ДанныеДокумента = Новый Структура;
					ДанныеДокумента.Вставить("ВидОперации",					Документ.Тематика.GUID_УПП);
					ДанныеДокумента.Вставить("Организация", 				Документ.Организация.GUID_УПП);
					ДанныеДокумента.Вставить("ЦФО", 						Документ.Подразделение.GUID_УПП);
					ДанныеДокумента.Вставить("Ответственный", 				Документ.Ответственный.ПредставлениеВПереписке);
					ДанныеДокумента.Вставить("НазначениеПлатежа", 			Документ.Содержание);
					ДанныеДокумента.Вставить("ВалютаДокумента", 			Документ.Валюта.Код);
					ДанныеДокумента.Вставить("ДатаРасхода", 				Документ.СрокИсполнения);
					ДанныеДокумента.Вставить("Комментарий",					Документ.Комментарий);
					ДанныеДокумента.Вставить("СуммаДокумента",				Документ.Сумма);
					ДанныеДокумента.Вставить("Глн_НомерВоВнешнейСистеме ",	Документ.РегистрационныйНомер);
					ДанныеДокумента.Вставить("Состояние", 					Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ));
					
					ДанныеДокумента.Вставить("СчетОрганизации",				СсылкаНаДопДанные.СчетОрганизацииGUID);
					ДанныеДокумента.Вставить("Контрагент",					СсылкаНаДопДанные.КонтрагентGUID);
					ДанныеДокумента.Вставить("СчетКонтрагента",				СсылкаНаДопДанные.СчетКонтрагентаGUID);
					ДанныеДокумента.Вставить("ВключатьВПлатежныйКалендарь",	СсылкаНаДопДанные.ВключатьВПлатежныйКалендарь);
					ДанныеДокумента.Вставить("НужнаПлатежка",				СсылкаНаДопДанные.НужнаПлатежка);
					ДанныеДокумента.Вставить("ПеречислениеВБюджет",			СсылкаНаДопДанные.ВБюджет);
					ДанныеДокумента.Вставить("КодВыплат",					СсылкаНаДопДанные.УИН);
					ДанныеДокумента.Вставить("ЛицевойСчет",					СсылкаНаДопДанные.ЛицевойСчет);
					ДанныеДокумента.Вставить("КороткийМаршрутСогласования",	СсылкаНаДопДанные.КороткийМаршрутСогласования);
					
					//РасшифровкаПлатежа
					МассивРасшифровкаПлатежа = Новый Массив;
					Для каждого Строка Из СсылкаНаДопДанные.РасшифровкаПлатежа Цикл
						СтруктураДанныхСтроки = Новый Структура;
						СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", 			Строка.ДоговорКонтрагентаGUID);
						СтруктураДанныхСтроки.Вставить("Сделка", 						Строка.СделкаGUID);
						СтруктураДанныхСтроки.Вставить("СуммаПлатежа", 					Строка.СуммаПлатежа);
						СтруктураДанныхСтроки.Вставить("СтатьяДвиженияДенежныхСредств", Строка.СтатьяДДСGUID);
						СтруктураДанныхСтроки.Вставить("Поставка", 						Строка.ПоставкаGUID);
						СтруктураДанныхСтроки.Вставить("СуммаНДС", 						Строка.СуммаНДС);
						СтруктураДанныхСтроки.Вставить("СтавкаНДС", 					XMLстрока(Строка.СтавкаНДС));
						СтруктураДанныхСтроки.Вставить("СчетНомер", 					Строка.СчетНомер);
						СтруктураДанныхСтроки.Вставить("СчетДата", 						Строка.СчетДата);
						
						МассивРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
					КонецЦикла;
					ДанныеДокумента.Вставить("РасшифровкаПлатежа", МассивРасшифровкаПлатежа);
					
					
					//РазбивкаПоКатегориям
					МассивКатегорий = Новый Массив;
					Для каждого Строка Из СсылкаНаДопДанные.РазбивкаПоКатегориям Цикл
						СтруктураДанныхСтроки = Новый Структура;
						СтруктураДанныхСтроки.Вставить("НоменклатурнаяГруппа", 	Строка.НоменклатурнаяГруппаGUID);
						СтруктураДанныхСтроки.Вставить("ЦФО", 					Строка.ЦФО.GUID_УПП);
						СтруктураДанныхСтроки.Вставить("Процент", 				Строка.Процент);
						МассивКатегорий.Добавить(СтруктураДанныхСтроки);
					КонецЦикла;
					ДанныеДокумента.Вставить("РазбивкаПоКатегориям", МассивКатегорий);
					
					
					СтруктураДанных.Вставить("ДанныеДокумента", ДанныеДокумента);
					
				КонецЕсли;
				
				Соединение = Неопределено;
				Если ДанныеПодключений.Свойство("ЗаявкиНаОплатуГален_ДанныеПоДокументу") Тогда
					Соединение = ДанныеПодключений.ЗаявкиНаОплатуГален_ДанныеПоДокументу;
				КонецЕсли;
				Если Соединение = неопределено Тогда
					Продолжить;
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РегОбъект) = Тип("РегистрСведенийНаборЗаписей.ТекущиеСостоянияДокументов") Тогда
			
			Документ = РегОбъект.Отбор.Документ.Значение;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("UIDMessage", 	Строка(Новый УникальныйИдентификатор));
			СтруктураДанных.Вставить("GUIDDoc", 	Строка(Документ.УникальныйИдентификатор()));
			СтруктураДанных.Вставить("Type", 		"РегистрСведений.ТекущиеСостоянияДокументов");
			СтруктураДанных.Вставить("Status",		Строка(РегОбъект.Отбор.Состояние.Значение));
			
			Соединение = Неопределено;
			Если ДанныеПодключений.Свойство("ЗаявкиНаОплатуГален_СтатусДокумента") Тогда
				Соединение = ДанныеПодключений.ЗаявкиНаОплатуГален_СтатусДокумента;
			КонецЕсли;
			Если Соединение = неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
			
			ДвоичныеДанныефайла = РаботаСФайлами.ДвоичныеДанныеФайла(РегОбъект.Ссылка);
			ФайлКакBase64 = Base64Строка(ДвоичныеДанныефайла);
			ФайлКакBase64 = СтрЗаменить(СтрЗаменить(ФайлКакBase64,Символы.ПС,""),Символы.ВК,"");
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("UIDMessage", 		Строка(Новый УникальныйИдентификатор));
			СтруктураДанных.Вставить("GUIDDoc", 		Строка(РегОбъект.Владелец.ВладелецФайла.УникальныйИдентификатор()));
			СтруктураДанных.Вставить("Type", 			"Справочник.Файлы");
			СтруктураДанных.Вставить("GUIDFile", 		Строка(РегОбъект.Владелец.УникальныйИдентификатор()));
			СтруктураДанных.Вставить("namefile", 		РегОбъект.ПолноеНаименование + "." + РегОбъект.Расширение);
			СтруктураДанных.Вставить("file", 			ФайлКакBase64);
			
			Соединение = Неопределено;
			Если ДанныеПодключений.Свойство("ЗаявкиНаОплатуГален_Файлы") Тогда
				Соединение = ДанныеПодключений.ЗаявкиНаОплатуГален_Файлы;
			КонецЕсли;
			Если Соединение = неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		РегистрыСведений.УМ_ОчередьСообщенийКОтправке.ДобавитьСообщение(
			ТипСобытия_ИнтеграцияУПП_ЗаявкиНаОплату,
			Соединение,
			СтруктураДанных,
			СтруктураДанных.UIDMessage);  
			
		//Снимем регистрацию с плана обмена
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, РегОбъект);
		ЗафиксироватьТранзакцию();
			
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УМ_ОчередьСообщенийКОтправке.Идентификатор КАК Идентификатор,
		|	УМ_ОчередьСообщенийКОтправке.ПолучательПодключение КАК ПолучательПодключение,
		|	УМ_ОчередьСообщенийКОтправке.Данные КАК Данные
		|ИЗ
		|	РегистрСведений.УМ_ОчередьСообщенийКОтправке КАК УМ_ОчередьСообщенийКОтправке
		|ГДЕ
		|	НЕ УМ_ОчередьСообщенийКОтправке.ОтправкаЗаблокирована
		|	И УМ_ОчередьСообщенийКОтправке.ТипСобытия = &ТипСобытия
		|	И НЕ УМ_ОчередьСообщенийКОтправке.СообщениеОтправлено
		|ИТОГИ ПО
		|	ПолучательПодключение";
	Запрос.УстановитьПараметр("ТипСобытия", ТипСобытия_ИнтеграцияУПП_ЗаявкиНаОплату);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПолучательПодключение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПолучательПодключение.Следующий() Цикл
		
		Соединение = ПолучитьСоединениеПоПодключению(ВыборкаПолучательПодключение.ПолучательПодключение);
		
		МассивСообщений 		= Новый Массив;
		МассивУИДовСообщений 	= Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаПолучательПодключение.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивСообщений.Добавить(ВыборкаДетальныеЗаписи.Данные.Получить());
			МассивУИДовСообщений.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
		КонецЦикла;
		
		Если МассивУИДовСообщений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтправки = Новый Структура;
		СтруктураОтправки.Вставить("ArrayMessages", МассивСообщений);
		СтруктураОтправки.Вставить("IDNode", 		IDNode);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();  
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтправки);            
		ДанныеВУПП = ЗаписьJSON.Закрыть();
		
		HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса);
		HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеВУПП);
		
		ДанныеОтвета = Неопределено;
		Попытка
			ДатаВремяНачалаПопыткиОтправки = ТекущаяДата();
			Ответ = Соединение.HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			Если Ответ.КодСостояния = 200 Тогда
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());  
				ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);            
				ЧтениеJSON.Закрыть();
			Иначе
				
				Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
					ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки);
				КонецЦикла;
				
				ЗаписьЖурналаРегистрации(
					"DT_ИнтеграцияСДокументооборотом",
					УровеньЖурналаРегистрации.Ошибка,,,
					"Ошибка при интеграции с УПП. Код состояния: " + Ответ.КодСостояния + Символы.ПС + Ответ.ПолучитьТелоКакСтроку());
			КонецЕсли;
		Исключение
			
			Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
				ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки);
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				"DT_ИнтеграцияСДокументооборотом",
				УровеньЖурналаРегистрации.Ошибка,,,
				"Ошибка при интеграции с УПП. " + ОписаниеОшибки());
		КонецПопытки;
			
		Если ДанныеОтвета <> Неопределено Тогда
			
			Для каждого ДанныеСообщения Из ДанныеОтвета.Result.New Цикл
				
				Тип = ДанныеСообщения.Type;
				МТип = СтрРазделить(Тип, ".",Ложь);
				
				ОбъектДО = Неопределено;
				Если МТип[0] = "Справочник" Тогда
					ОбъектДО = Справочники[МТип[1]].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСообщения.GUID_DO));	
				КонецЕсли;
				Если ОбъектДО = Неопределено ИЛИ ОбъектДО.ПолучитьОбъект() = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				DT_ИнтеграцияСВнешнимиСистемами.ЗаписатьСоответствиеОбъектовДОиВнешнейСистемы(
					ОбъектДО,
					ДанныеСообщения.GUID_UPP,
					ПланыОбмена.DT_ДО_ВнешниеСистемы.НайтиПоКоду(ДанныеСообщения.IDNode));
			
			КонецЦикла;
			
			Для каждого УИДСообщения Из ДанныеОтвета.Result.Good Цикл
				ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Истина, ДатаВремяНачалаПопыткиОтправки);
			КонецЦикла;
			
			Для каждого УИДСообщения Из ДанныеОтвета.Result.Error Цикл
				ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки);
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	УзелОбъект = Узел.ПолучитьОбъект();
	УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;
	УзелОбъект.Записать();
	      
КонецЦикла;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'ЗаявкиНаОплатуГален_ДанныеПоДокументу',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede342c76fecdd',
     'ЗначениеСтрока': '',
     'Комментарий': ''
    },
    {
     'Имя': 'ЗаявкиНаОплатуГален_СтатусДокумента',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede342c76fecdd',
     'ЗначениеСтрока': '',
     'Комментарий': ''
    },
    {
     'Имя': 'ЗаявкиНаОплатуГален_Файлы',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede342c76fecdd',
     'ЗначениеСтрока': '',
     'Комментарий': ''
    },
    {
     'Имя': 'ИнтеграцияУПП_ЗаявкиНаОплату',
     'Разделитель': 'e1cib/data/Справочник.УМ_ИнформационныеБазы?ref=a14287575112374c11ede342c76fecdd',
     'ЗначениеСтрока': '',
     'Комментарий': ''
    }
   ]
  }
 ]
}
