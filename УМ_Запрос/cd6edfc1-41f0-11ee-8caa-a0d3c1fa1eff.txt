{
 'Реквизиты': {
  'Код': '000000034',
  'Наименование': 'Интеграция с УПП',
  'ТекстОбработки': 'Узел = УМ_ДинамическиеКонстантыПовтИсп.ПолучитьЗначениеДинамическойКонстанты("УзелОбменаУПП");
ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного);
        
ЕстьОшибкиВыполнения = Ложь;
        
Пока ВыборкаИзменений.Следующий() Цикл
	
	РегОбъект = ВыборкаИзменений.Получить();

	Если ТипЗнч(РегОбъект) = Тип("РегистрСведенийНаборЗаписей.ТекущиеСостоянияДокументов") Тогда
		
		Документ = РегОбъект.Отбор.Документ.Значение;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("UIDMessage", 	Строка(Новый УникальныйИдентификатор));
		СтруктураДанных.Вставить("GUIDDoc", 	Строка(Документ.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("Status",		Строка(РегОбъект.Отбор.Состояние.Значение));
		
		ПараметрыПодключения = УМ_ДинамическиеКонстантыПовтИсп.ПолучитьЗначениеДинамическойКонстанты("АдресИнтеграцииУПП_СогласованиеОтказныхПозиций_СтатусДокумента");
		Если ПараметрыПодключения = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				"DT_ИнтеграцияСУПП",
				УровеньЖурналаРегистрации.Ошибка,,,
				"Не задана переменная АдресИнтеграцииУПП_СогласованиеОтказныхПозиций_СтатусДокумента");  
				
			ЕстьОшибкиВыполнения = Истина;
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ПараметрыПодключения) <> Тип("Структура")
			ИЛИ НЕ ПараметрыПодключения.Свойство("Сервер") ИЛИ НЕ ПараметрыПодключения.Свойство("АдресСервиса")
			ИЛИ НЕ ПараметрыПодключения.Свойство("Логин") ИЛИ НЕ ПараметрыПодключения.Свойство("Пароль")
			ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодключения.Сервер) ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодключения.АдресСервиса)
			ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодключения.Логин) ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодключения.Пароль) Тогда
			ЗаписьЖурналаРегистрации(
				"DT_ИнтеграцияСУПП",
				УровеньЖурналаРегистрации.Ошибка,,,
				"Ошибка заполнения переменной АдресИнтеграцииУПП_СогласованиеОтказныхПозиций_СтатусДокумента");
			
			ЕстьОшибкиВыполнения = Истина;
			Продолжить;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		
		Документ = РегОбъект.Ссылка;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("UIDMessage", 	Строка(Новый УникальныйИдентификатор));
		СтруктураДанных.Вставить("GUIDDoc", 	Строка(Документ.УникальныйИдентификатор()));
		
		МассивДанныхПоСтрокам = Новый Массив;
		СсылкаНаДопДанные = DT_ОбщегоНазначенияСерверВызовСервера.ПолучитьСсылкуНаДопДанныеДокумента(Документ, "DT_Данные_СогласованиеОтказныхПозиций");	
		Если ЗначениеЗаполнено(СсылкаНаДопДанные) Тогда
			Для каждого СтрокаТЧ Из СсылкаНаДопДанные.Товары Цикл
				
				СтруктураДанныхСтроки = Новый Структура;
				СтруктураДанныхСтроки.Вставить("IDRow", Строка(СтрокаТЧ.ИдентификаторСтроки));
				СтруктураДанныхСтроки.Вставить("Count", Строка(СтрокаТЧ.КоличествоСогласованное));
				
				МассивДанныхПоСтрокам.Добавить(СтруктураДанныхСтроки);

			КонецЦикла;
		КонецЕсли;
		СтруктураДанных.Вставить("Goods", МассивДанныхПоСтрокам);
		
		ПараметрыПодключения = УМ_ДинамическиеКонстантыПовтИсп.ПолучитьЗначениеДинамическойКонстанты("АдресИнтеграцииУПП_СогласованиеОтказныхПозиций_ДанныеПоДокументу");
		Если ПараметрыПодключения = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				"DT_ИнтеграцияСУПП",
				УровеньЖурналаРегистрации.Ошибка,,,
				"Не задана переменная АдресИнтеграцииУПП_СогласованиеОтказныхПозиций_ДанныеПоДокументу");
			
			ЕстьОшибкиВыполнения = Истина;
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ПараметрыПодключения) <> Тип("Структура")
			ИЛИ НЕ ПараметрыПодключения.Свойство("Сервер") ИЛИ НЕ ПараметрыПодключения.Свойство("АдресСервиса")
			ИЛИ НЕ ПараметрыПодключения.Свойство("Логин") ИЛИ НЕ ПараметрыПодключения.Свойство("Пароль")
			ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодключения.Сервер) ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодключения.АдресСервиса)
			ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодключения.Логин) ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПодключения.Пароль) Тогда
			ЗаписьЖурналаРегистрации(
				"DT_ИнтеграцияСУПП",
				УровеньЖурналаРегистрации.Ошибка,,,
				"Ошибка заполнения переменной АдресИнтеграцииУПП_СогласованиеОтказныхПозиций_ДанныеПоДокументу");
			
			ЕстьОшибкиВыполнения = Истина;
			Продолжить;
		КонецЕсли;
		
	Иначе
		
		ЕстьОшибкиВыполнения = Истина;
		Продолжить;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);            
	ДанныеJSON = ЗаписьJSON.Закрыть();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, ПараметрыПодключения);            
	ДанныеJSON_ПараметрыПодключения = ЗаписьJSON.Закрыть();
	
	МенеджерЗаписи = РегистрыСведений.DT_СообщенияВУПП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УИДСообщения = СтруктураДанных.UIDMessage;
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Сообщение = ДанныеJSON;
	МенеджерЗаписи.ПараметрыПодключения = ДанныеJSON_ПараметрыПодключения;
	МенеджерЗаписи.Записать();
	
КонецЦикла;

Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	DT_СообщенияВУПП.УИДСообщения КАК УИДСообщения,
	|	DT_СообщенияВУПП.Сообщение КАК Сообщение,
	|	DT_СообщенияВУПП.ПараметрыПодключения КАК ПараметрыПодключения
	|ИЗ
	|	РегистрСведений.DT_СообщенияВУПП КАК DT_СообщенияВУПП
	|ГДЕ
	|	DT_СообщенияВУПП.ПопытокОтправки < 3
	|ИТОГИ ПО
	|	ПараметрыПодключения";
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПараметрыПодключения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
Пока ВыборкаПараметрыПодключения.Следующий() Цикл
	Выборка = ВыборкаПараметрыПодключения.Выбрать();
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ВыборкаПараметрыПодключения.ПараметрыПодключения);
	ПараметрыПодключения = ПрочитатьJSON(Чтение);  
	Чтение.Закрыть();
	
	МассивСообщений = Новый Массив;
	МассивУИДовСообщений = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивСообщений.Добавить(Выборка.Сообщение);
		МассивУИДовСообщений.Добавить(Выборка.УИДСообщения);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, МассивСообщений);            
	СообщениеВУПП = ЗаписьJSON.Закрыть();

	Соединение = Новый HTTPСоединение(
		ПараметрыПодключения.Сервер,
		80,
		ПараметрыПодключения.Логин,
		ПараметрыПодключения.Пароль,,,,
		Ложь);
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыПодключения.АдресСервиса);
	HTTPЗапрос.УстановитьТелоИзСтроки(СообщениеВУПП);

	ДанныеОтвета = Неопределено;
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());  
			ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);            
			ЧтениеJSON.Закрыть();
		Иначе
			
			Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
				Запись = РегистрыСведений.DT_СообщенияВУПП.СоздатьМенеджерЗаписи();
				Запись.УИДСообщения = УИДСообщения;
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					Запись.ПопытокОтправки = Запись.ПопытокОтправки + 1;
					Запись.Записать();
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				"DT_ИнтеграцияСДокументооборотом",
				УровеньЖурналаРегистрации.Ошибка,,,
				"Ошибка при интеграции с УПП. Код состояния: " + Ответ.КодСостояния + Символы.ПС + Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
	Исключение
		
		Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
			Запись = РегистрыСведений.DT_СообщенияВУПП.СоздатьМенеджерЗаписи();
			Запись.УИДСообщения = УИДСообщения;
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
				Запись.ПопытокОтправки = Запись.ПопытокОтправки + 1;
				Запись.Записать();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(
			"DT_ИнтеграцияСДокументооборотом",
			УровеньЖурналаРегистрации.Ошибка,,,
			ОписаниеОшибки());
	КонецПопытки;
	
	Если ДанныеОтвета <> Неопределено Тогда
	
		Для каждого УИДСообщения Из ДанныеОтвета.Good Цикл
			Запись = РегистрыСведений.DT_СообщенияВУПП.СоздатьМенеджерЗаписи();
			Запись.УИДСообщения = УИДСообщения;
			Запись.Удалить();
		КонецЦикла;
		
		Для каждого УИДСообщения Из ДанныеОтвета.Error Цикл
			Запись = РегистрыСведений.DT_СообщенияВУПП.СоздатьМенеджерЗаписи();
			Запись.УИДСообщения = УИДСообщения;
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
				Запись.ПопытокОтправки = Запись.ПопытокОтправки + 1;
				Запись.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
			
	УзелОбъект = Узел.ПолучитьОбъект();
	УзелОбъект.НомерОтправленного = УзелОбъект.НомерОтправленного + 1;
	УзелОбъект.Записать();

КонецЦикла;
      
Если НЕ ЕстьОшибкиВыполнения Тогда
	МассивОбъектовДляОтменыРегистрации = Новый Массив;
	ВыборкаИзменений.Сбросить();
	Пока ВыборкаИзменений.Следующий() Цикл
		РегОбъект = ВыборкаИзменений.Получить();
		
		Если ТипЗнч(РегОбъект) = Тип("РегистрСведенийНаборЗаписей.ТекущиеСостоянияДокументов") Тогда
			МассивОбъектовДляОтменыРегистрации.Добавить(РегОбъект);
			
		ИначеЕсли ТипЗнч(РегОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
			МассивОбъектовДляОтменыРегистрации.Добавить(РегОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;

	Если ЗначениеЗаполнено(МассивОбъектовДляОтменыРегистрации) Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, МассивОбъектовДляОтменыРегистрации);
	КонецЕсли;
КонецЕсли;',
  'Комментарий': ''
 },
 'ТЧ': [
  {
   'Переменные': []
  }
 ]
}
