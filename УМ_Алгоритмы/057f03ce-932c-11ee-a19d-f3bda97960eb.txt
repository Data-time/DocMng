{
 'Реквизиты': {
  'Код': 'ОтправитьСообщениеВУХпоТипуСобытия',
  'Наименование': 'Отправить сообщение в УХ по типу события',
  'Принадлежит': 'e1cib/data/Справочник.УМ_Запрос?ref=00000000000000000000000000000000',
  'ТекстАлгоритма': 'IDNode = "01d86b4e-9605-4df6-8d45-043a0a105895";//Идентификатор узла УХ в ДО

Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	УМ_ОчередьСообщенийКОтправке.Идентификатор КАК Идентификатор,
	|	УМ_ОчередьСообщенийКОтправке.ПолучательПодключение КАК ПолучательПодключение,
	|	УМ_ОчередьСообщенийКОтправке.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.УМ_ОчередьСообщенийКОтправке КАК УМ_ОчередьСообщенийКОтправке
	|ГДЕ
	|	НЕ УМ_ОчередьСообщенийКОтправке.ОтправкаЗаблокирована
	|	И УМ_ОчередьСообщенийКОтправке.ТипСобытия = &ТипСобытия
	|	И НЕ УМ_ОчередьСообщенийКОтправке.СообщениеОтправлено
//++ SP-12042
	|
	|УПОРЯДОЧИТЬ ПО
	|	УМ_ОчередьСообщенийКОтправке.ДатаСозданияMs
//-- SP-12042
	|ИТОГИ ПО
	|	ПолучательПодключение";
Запрос.УстановитьПараметр("ТипСобытия", ТипСобытия);
РезультатЗапроса = Запрос.Выполнить();

ВыборкаПолучательПодключение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
Пока ВыборкаПолучательПодключение.Следующий() Цикл
	
	МассивСообщений 		= Новый Массив;
	МассивУИДовСообщений 	= Новый Массив;
	
	ВыборкаДетальныеЗаписи = ВыборкаПолучательПодключение.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСообщений.Добавить(ВыборкаДетальныеЗаписи.Данные.Получить());
		МассивУИДовСообщений.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	Если МассивУИДовСообщений.Количество() = 0 Тогда
		Продолжить;
	КонецЕсли;
	
	СтрокаОшибок = "";
	Соединение = ПолучитьСоединениеПоПодключению(ВыборкаПолучательПодключение.ПолучательПодключение, СтрокаОшибок);
	Если Соединение = Неопределено Тогда
		ТекстОшибки = "Ошибка при интеграции с " + ИмяИнтеграции + ". Ошибка получения соединения: " + СтрокаОшибок;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			
		Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
			ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ТекущаяДата(), ТекстОшибки);
		КонецЦикла;
		
		Продолжить;
	КонецЕсли;
	
	СтруктураОтправки = Новый Структура;
	СтруктураОтправки.Вставить("ArrayMessages", МассивСообщений);
	СтруктураОтправки.Вставить("IDNode", 		IDNode);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтправки);            
	ДанныеВУПП = ЗаписьJSON.Закрыть();
	
	HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса);
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеВУПП);
	
	МассивОтветаСервиса = Новый Массив;
	Попытка
		ДатаВремяНачалаПопыткиОтправки = ТекущаяДата();
		Ответ = Соединение.HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());  
			ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);            
			ЧтениеJSON.Закрыть();
			
			Если ДанныеОтвета.Success Тогда
				Если ТипЗнч(ДанныеОтвета.Result) = Тип("Массив") Тогда
					МассивОтветаСервиса = ДанныеОтвета.Result;
				Иначе	
					Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
						ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки, ДанныеОтвета.Result);
					КонецЦикла;
				КонецЕсли;
			Иначе	
				Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
					ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки, ДанныеОтвета.Result);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			ТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				"Ошибка при интеграции с " + ИмяИнтеграции + ". Код состояния: " + Ответ.КодСостояния + Символы.ПС + ТекстОшибки);
				
			Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
				ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки, ТекстОшибки);
			КонецЦикла;
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			"Ошибка при интеграции с " + ИмяИнтеграции + ". " + ТекстОшибки);
			
		Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
			ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки, ТекстОшибки);
		КонецЦикла;
	КонецПопытки;
	
	ПараметрыСеанса.УзелИнтегрированнойСистемы = ПланыОбмена.ИнтегрированныеСистемы.НайтиПоРеквизиту("Идентификатор", IDNode);
	
	Для каждого ДанныеОбработки Из МассивОтветаСервиса Цикл
	
		ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(
			ДанныеОбработки.GUID,
			ДанныеОбработки.Success,
			ДатаВремяНачалаПопыткиОтправки,
			ДанныеОбработки.ErrorText);
			
		Если ТипЗнч(ДанныеОбработки.ExtraData) = Тип("Структура") Тогда
			
			Если ДанныеОбработки.ExtraData.Свойство("GUID_DO")
				И ДанныеОбработки.ExtraData.Свойство("GUID_UH")
				И ДанныеОбработки.ExtraData.Свойство("Type")
				И ДанныеОбработки.ExtraData.Свойство("Type_OUT") Тогда
			
				Тип = ДанныеОбработки.ExtraData.Type;
				МТип = СтрРазделить(Тип, ".",Ложь);
				
				ОбъектДО = Неопределено;
				Если МТип[0] = "Справочник" Тогда
					ОбъектДО = Справочники[МТип[1]].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеОбработки.ExtraData.GUID_DO));	
				КонецЕсли;
				Если ОбъектДО <> Неопределено И ОбъектДО.ПолучитьОбъект() <> Неопределено Тогда

					РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ДобавитьСвязьОбъектаДОИВнешнегоОбъекта(
						ДанныеОбработки.ExtraData.GUID_UH,
						ДанныеОбработки.ExtraData.Type_OUT,
						ОбъектДО);
					
				КонецЕсли;
						
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецЦикла;',
  'Описание': ''
 },
 'ТЧ': [
  {
   'Параметры': [
    {
     'ИмяПараметра': 'ТипСобытия'
    },
    {
     'ИмяПараметра': 'ИмяСобытия'
    },
    {
     'ИмяПараметра': 'ИмяИнтеграции'
    }
   ]
  }
 ]
}
