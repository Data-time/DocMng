{
 'Реквизиты': {
  'Код': 'УПП_ВозвратОборудования_ОформленВозвратПрибора',
  'Наименование': 'УПП_ВозвратОборудования_ОформленВозвратПрибора',
  'Принадлежит': 'e1cib/data/Справочник.УМ_Запрос?ref=00000000000000000000000000000000',
  'ТекстАлгоритма': 'IDNode = "UPP";//Код узла на стороне УПП

Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	УМ_ОчередьСообщенийКОтправке.Идентификатор КАК Идентификатор,
	|	УМ_ОчередьСообщенийКОтправке.ПолучательПодключение КАК ПолучательПодключение,
	|	УМ_ОчередьСообщенийКОтправке.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.УМ_ОчередьСообщенийКОтправке КАК УМ_ОчередьСообщенийКОтправке
	|ГДЕ
	|	НЕ УМ_ОчередьСообщенийКОтправке.ОтправкаЗаблокирована
	|	И УМ_ОчередьСообщенийКОтправке.ТипСобытия = &ТипСобытия
	|	И НЕ УМ_ОчередьСообщенийКОтправке.СообщениеОтправлено
	|ИТОГИ ПО
	|	ПолучательПодключение";
Запрос.УстановитьПараметр("ТипСобытия", ТипСобытия);
РезультатЗапроса = Запрос.Выполнить();

ВыборкаПолучательПодключение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
Пока ВыборкаПолучательПодключение.Следующий() Цикл
	
	МассивСообщений 		= Новый Массив;
	МассивУИДовСообщений 	= Новый Массив;
	
	ВыборкаДетальныеЗаписи = ВыборкаПолучательПодключение.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСообщений.Добавить(ВыборкаДетальныеЗаписи.Данные.Получить());
		МассивУИДовСообщений.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	Если МассивУИДовСообщений.Количество() = 0 Тогда
		Продолжить;
	КонецЕсли;
	
	СтрокаОшибок = "";
	Соединение = УМ_ВнешниеПодключения.ПолучитьСоединениеПоПодключению(ВыборкаПолучательПодключение.ПолучательПодключение, СтрокаОшибок);
	Если Соединение = Неопределено Тогда
		ТекстОшибки = "Ошибка при интеграции с " + ИмяИнтеграции + ". Ошибка получения соединения: " + СтрокаОшибок;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			
		Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
			УМ_Интеграции.ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ТекущаяДата(), ТекстОшибки);
		КонецЦикла;
		
		Продолжить;
	КонецЕсли;
	
	СтруктураОтправки = Новый Структура;
	СтруктураОтправки.Вставить("ArrayMessages", МассивСообщений);
	СтруктураОтправки.Вставить("IDNode", 		IDNode);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтправки);            
	ДанныеВУПП = ЗаписьJSON.Закрыть();
	
	HTTPЗапрос = Новый HTTPЗапрос(Соединение.АдресЗапроса);
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеВУПП);
	
	МассивОтветаСервиса = Новый Массив;
	Попытка
		ДатаВремяНачалаПопыткиОтправки = ТекущаяДата();
		Ответ = Соединение.HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());  
			ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);            
			ЧтениеJSON.Закрыть();
			
			Если ДанныеОтвета.Success Тогда
				Если ТипЗнч(ДанныеОтвета.Result) = Тип("Массив") Тогда
					МассивОтветаСервиса = ДанныеОтвета.Result;
				Иначе	
					Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
						УМ_Интеграции.ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки, ДанныеОтвета.Result);
					КонецЦикла;
				КонецЕсли;
			Иначе	
				Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
					УМ_Интеграции.ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки, ДанныеОтвета.Result);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			ТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				"Ошибка при интеграции с " + ИмяИнтеграции + ". Код состояния: " + Ответ.КодСостояния + Символы.ПС + ТекстОшибки);
				
			Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
				УМ_Интеграции.ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки, ТекстОшибки);
			КонецЦикла;
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			"Ошибка при интеграции с " + ИмяИнтеграции + ". " + ТекстОшибки);
			
		Для каждого УИДСообщения Из МассивУИДовСообщений Цикл
			УМ_Интеграции.ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(УИДСообщения, Ложь, ДатаВремяНачалаПопыткиОтправки, ТекстОшибки);
		КонецЦикла;
	КонецПопытки;
	
	Для каждого ДанныеОбработки Из МассивОтветаСервиса Цикл
	
		УМ_Интеграции.ОбработатьРезультатОтправкиСообщенияИзОчередиКОтправке(
			ДанныеОбработки.GUID,
			ДанныеОбработки.Success,
			ДатаВремяНачалаПопыткиОтправки,
			ДанныеОбработки.ErrorText);
			
		Если ТипЗнч(ДанныеОбработки.ExtraData) = Тип("Структура") Тогда
			
			Если ДанныеОбработки.ExtraData.Свойство("Result")
				И ДанныеОбработки.ExtraData.Свойство("GUIDAction")
				И ДанныеОбработки.ExtraData.Свойство("NameDoc") Тогда
				
				Если ДанныеОбработки.ExtraData.Result Тогда
				
					Действия = Новый Массив;
					Действия.Добавить(Справочники.ДействияИсполнения.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеОбработки.ExtraData.GUIDAction)));
					
					ЗадачиДействия = РаботаСПроцессамиПоДействиям.ЗадачиПроцессовПоУчастникамДействий(Действия);
					
					Для Каждого КлючИЗначение1 Из ЗадачиДействия Цикл
		
						ЗадачиПроцессовПоУчастникамДействия = КлючИЗначение1.Значение;
						Для Каждого КлючИЗначение2 Из ЗадачиПроцессовПоУчастникамДействия Цикл
							
							ЗадачаПроцесса = КлючИЗначение2.Значение;
							
							ПараметрыВыполнения = Новый Структура;
							ПараметрыВыполнения.Вставить("РезультатВыполнения", "Оформлен документ: " + ДанныеОбработки.ExtraData.NameDoc);
							ПараметрыВыполнения.Вставить("ДатаИсполнения", ТекущаяДатаСеанса());
							
							ВыполнениеЗадачСервер.ВыполнитьЗадачу(ЗадачаПроцесса, ПараметрыВыполнения);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецЦикла;',
  'Описание': ''
 },
 'ТЧ': [
  {
   'Параметры': [
    {
     'ИмяПараметра': 'ТипСобытия'
    },
    {
     'ИмяПараметра': 'ИмяСобытия'
    },
    {
     'ИмяПараметра': 'ИмяИнтеграции'
    }
   ]
  }
 ]
}
